
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models.ts'
export type * from './prismaNamespace.ts'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  SocialAccount: 'SocialAccount',
  Complex: 'Complex',
  SubField: 'SubField',
  PricingRule: 'PricingRule',
  Booking: 'Booking',
  Payment: 'Payment'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  full_name: 'full_name',
  phone_number: 'phone_number',
  role: 'role',
  level: 'level',
  avatar: 'avatar',
  company_name: 'company_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email_verified: 'email_verified',
  phone_verified: 'phone_verified'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  user_id: 'user_id',
  revoked: 'revoked',
  expires_at: 'expires_at',
  created_at: 'created_at'
} as const

export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


export const SocialAccountScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  provider_id: 'provider_id',
  user_id: 'user_id'
} as const

export type SocialAccountScalarFieldEnum = (typeof SocialAccountScalarFieldEnum)[keyof typeof SocialAccountScalarFieldEnum]


export const ComplexScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  sport_type: 'sport_type',
  owner_id: 'owner_id',
  is_active: 'is_active',
  complex_image: 'complex_image',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type ComplexScalarFieldEnum = (typeof ComplexScalarFieldEnum)[keyof typeof ComplexScalarFieldEnum]


export const SubFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  capacity: 'capacity',
  complex_id: 'complex_id',
  sub_field_image: 'sub_field_image',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type SubFieldScalarFieldEnum = (typeof SubFieldScalarFieldEnum)[keyof typeof SubFieldScalarFieldEnum]


export const PricingRuleScalarFieldEnum = {
  id: 'id',
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time',
  base_price: 'base_price',
  sub_field_id: 'sub_field_id',
  is_dynamic: 'is_dynamic',
  dynamic_config: 'dynamic_config'
} as const

export type PricingRuleScalarFieldEnum = (typeof PricingRuleScalarFieldEnum)[keyof typeof PricingRuleScalarFieldEnum]


export const BookingScalarFieldEnum = {
  id: 'id',
  start_time: 'start_time',
  end_time: 'end_time',
  total_price: 'total_price',
  status: 'status',
  created_at: 'created_at',
  paid_at: 'paid_at',
  user_id: 'user_id',
  sub_field_id: 'sub_field_id'
} as const

export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


export const PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  provider: 'provider',
  status: 'status',
  booking_id: 'booking_id',
  transaction_code: 'transaction_code',
  created_at: 'created_at'
} as const

export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]

