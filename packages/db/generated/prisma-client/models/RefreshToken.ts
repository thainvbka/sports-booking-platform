
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RefreshToken` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model RefreshToken
 * 
 */
export type RefreshTokenModel = runtime.Types.Result.DefaultSelection<Prisma.$RefreshTokenPayload>

export type AggregateRefreshToken = {
  _count: RefreshTokenCountAggregateOutputType | null
  _min: RefreshTokenMinAggregateOutputType | null
  _max: RefreshTokenMaxAggregateOutputType | null
}

export type RefreshTokenMinAggregateOutputType = {
  id: string | null
  token: string | null
  user_id: string | null
  revoked: boolean | null
  expires_at: Date | null
  created_at: Date | null
}

export type RefreshTokenMaxAggregateOutputType = {
  id: string | null
  token: string | null
  user_id: string | null
  revoked: boolean | null
  expires_at: Date | null
  created_at: Date | null
}

export type RefreshTokenCountAggregateOutputType = {
  id: number
  token: number
  user_id: number
  revoked: number
  expires_at: number
  created_at: number
  _all: number
}


export type RefreshTokenMinAggregateInputType = {
  id?: true
  token?: true
  user_id?: true
  revoked?: true
  expires_at?: true
  created_at?: true
}

export type RefreshTokenMaxAggregateInputType = {
  id?: true
  token?: true
  user_id?: true
  revoked?: true
  expires_at?: true
  created_at?: true
}

export type RefreshTokenCountAggregateInputType = {
  id?: true
  token?: true
  user_id?: true
  revoked?: true
  expires_at?: true
  created_at?: true
  _all?: true
}

export type RefreshTokenAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RefreshToken to aggregate.
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshTokens to fetch.
   */
  orderBy?: Prisma.RefreshTokenOrderByWithRelationInput | Prisma.RefreshTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RefreshTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RefreshTokens
  **/
  _count?: true | RefreshTokenCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RefreshTokenMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RefreshTokenMaxAggregateInputType
}

export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
      [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRefreshToken[P]>
    : Prisma.GetScalarType<T[P], AggregateRefreshToken[P]>
}




export type RefreshTokenGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RefreshTokenWhereInput
  orderBy?: Prisma.RefreshTokenOrderByWithAggregationInput | Prisma.RefreshTokenOrderByWithAggregationInput[]
  by: Prisma.RefreshTokenScalarFieldEnum[] | Prisma.RefreshTokenScalarFieldEnum
  having?: Prisma.RefreshTokenScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RefreshTokenCountAggregateInputType | true
  _min?: RefreshTokenMinAggregateInputType
  _max?: RefreshTokenMaxAggregateInputType
}

export type RefreshTokenGroupByOutputType = {
  id: string
  token: string
  user_id: string
  revoked: boolean
  expires_at: Date
  created_at: Date
  _count: RefreshTokenCountAggregateOutputType | null
  _min: RefreshTokenMinAggregateOutputType | null
  _max: RefreshTokenMaxAggregateOutputType | null
}

type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
      }
    >
  >



export type RefreshTokenWhereInput = {
  AND?: Prisma.RefreshTokenWhereInput | Prisma.RefreshTokenWhereInput[]
  OR?: Prisma.RefreshTokenWhereInput[]
  NOT?: Prisma.RefreshTokenWhereInput | Prisma.RefreshTokenWhereInput[]
  id?: Prisma.UuidFilter<"RefreshToken"> | string
  token?: Prisma.StringFilter<"RefreshToken"> | string
  user_id?: Prisma.UuidFilter<"RefreshToken"> | string
  revoked?: Prisma.BoolFilter<"RefreshToken"> | boolean
  expires_at?: Prisma.DateTimeFilter<"RefreshToken"> | Date | string
  created_at?: Prisma.DateTimeFilter<"RefreshToken"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type RefreshTokenOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  revoked?: Prisma.SortOrder
  expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  token?: string
  AND?: Prisma.RefreshTokenWhereInput | Prisma.RefreshTokenWhereInput[]
  OR?: Prisma.RefreshTokenWhereInput[]
  NOT?: Prisma.RefreshTokenWhereInput | Prisma.RefreshTokenWhereInput[]
  user_id?: Prisma.UuidFilter<"RefreshToken"> | string
  revoked?: Prisma.BoolFilter<"RefreshToken"> | boolean
  expires_at?: Prisma.DateTimeFilter<"RefreshToken"> | Date | string
  created_at?: Prisma.DateTimeFilter<"RefreshToken"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "token">

export type RefreshTokenOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  revoked?: Prisma.SortOrder
  expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.RefreshTokenCountOrderByAggregateInput
  _max?: Prisma.RefreshTokenMaxOrderByAggregateInput
  _min?: Prisma.RefreshTokenMinOrderByAggregateInput
}

export type RefreshTokenScalarWhereWithAggregatesInput = {
  AND?: Prisma.RefreshTokenScalarWhereWithAggregatesInput | Prisma.RefreshTokenScalarWhereWithAggregatesInput[]
  OR?: Prisma.RefreshTokenScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RefreshTokenScalarWhereWithAggregatesInput | Prisma.RefreshTokenScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"RefreshToken"> | string
  token?: Prisma.StringWithAggregatesFilter<"RefreshToken"> | string
  user_id?: Prisma.UuidWithAggregatesFilter<"RefreshToken"> | string
  revoked?: Prisma.BoolWithAggregatesFilter<"RefreshToken"> | boolean
  expires_at?: Prisma.DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
}

export type RefreshTokenCreateInput = {
  id?: string
  token: string
  revoked?: boolean
  expires_at: Date | string
  created_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutRefresh_tokensInput
}

export type RefreshTokenUncheckedCreateInput = {
  id?: string
  token: string
  user_id: string
  revoked?: boolean
  expires_at: Date | string
  created_at?: Date | string
}

export type RefreshTokenUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutRefresh_tokensNestedInput
}

export type RefreshTokenUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RefreshTokenCreateManyInput = {
  id?: string
  token: string
  user_id: string
  revoked?: boolean
  expires_at: Date | string
  created_at?: Date | string
}

export type RefreshTokenUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RefreshTokenUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RefreshTokenListRelationFilter = {
  every?: Prisma.RefreshTokenWhereInput
  some?: Prisma.RefreshTokenWhereInput
  none?: Prisma.RefreshTokenWhereInput
}

export type RefreshTokenOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RefreshTokenCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  revoked?: Prisma.SortOrder
  expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type RefreshTokenMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  revoked?: Prisma.SortOrder
  expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type RefreshTokenMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  revoked?: Prisma.SortOrder
  expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type RefreshTokenCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.RefreshTokenCreateWithoutUserInput, Prisma.RefreshTokenUncheckedCreateWithoutUserInput> | Prisma.RefreshTokenCreateWithoutUserInput[] | Prisma.RefreshTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RefreshTokenCreateOrConnectWithoutUserInput | Prisma.RefreshTokenCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.RefreshTokenCreateManyUserInputEnvelope
  connect?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
}

export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.RefreshTokenCreateWithoutUserInput, Prisma.RefreshTokenUncheckedCreateWithoutUserInput> | Prisma.RefreshTokenCreateWithoutUserInput[] | Prisma.RefreshTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RefreshTokenCreateOrConnectWithoutUserInput | Prisma.RefreshTokenCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.RefreshTokenCreateManyUserInputEnvelope
  connect?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
}

export type RefreshTokenUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.RefreshTokenCreateWithoutUserInput, Prisma.RefreshTokenUncheckedCreateWithoutUserInput> | Prisma.RefreshTokenCreateWithoutUserInput[] | Prisma.RefreshTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RefreshTokenCreateOrConnectWithoutUserInput | Prisma.RefreshTokenCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.RefreshTokenUpsertWithWhereUniqueWithoutUserInput | Prisma.RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.RefreshTokenCreateManyUserInputEnvelope
  set?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  disconnect?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  delete?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  connect?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  update?: Prisma.RefreshTokenUpdateWithWhereUniqueWithoutUserInput | Prisma.RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.RefreshTokenUpdateManyWithWhereWithoutUserInput | Prisma.RefreshTokenUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.RefreshTokenScalarWhereInput | Prisma.RefreshTokenScalarWhereInput[]
}

export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.RefreshTokenCreateWithoutUserInput, Prisma.RefreshTokenUncheckedCreateWithoutUserInput> | Prisma.RefreshTokenCreateWithoutUserInput[] | Prisma.RefreshTokenUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RefreshTokenCreateOrConnectWithoutUserInput | Prisma.RefreshTokenCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.RefreshTokenUpsertWithWhereUniqueWithoutUserInput | Prisma.RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.RefreshTokenCreateManyUserInputEnvelope
  set?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  disconnect?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  delete?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  connect?: Prisma.RefreshTokenWhereUniqueInput | Prisma.RefreshTokenWhereUniqueInput[]
  update?: Prisma.RefreshTokenUpdateWithWhereUniqueWithoutUserInput | Prisma.RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.RefreshTokenUpdateManyWithWhereWithoutUserInput | Prisma.RefreshTokenUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.RefreshTokenScalarWhereInput | Prisma.RefreshTokenScalarWhereInput[]
}

export type RefreshTokenCreateWithoutUserInput = {
  id?: string
  token: string
  revoked?: boolean
  expires_at: Date | string
  created_at?: Date | string
}

export type RefreshTokenUncheckedCreateWithoutUserInput = {
  id?: string
  token: string
  revoked?: boolean
  expires_at: Date | string
  created_at?: Date | string
}

export type RefreshTokenCreateOrConnectWithoutUserInput = {
  where: Prisma.RefreshTokenWhereUniqueInput
  create: Prisma.XOR<Prisma.RefreshTokenCreateWithoutUserInput, Prisma.RefreshTokenUncheckedCreateWithoutUserInput>
}

export type RefreshTokenCreateManyUserInputEnvelope = {
  data: Prisma.RefreshTokenCreateManyUserInput | Prisma.RefreshTokenCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.RefreshTokenWhereUniqueInput
  update: Prisma.XOR<Prisma.RefreshTokenUpdateWithoutUserInput, Prisma.RefreshTokenUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.RefreshTokenCreateWithoutUserInput, Prisma.RefreshTokenUncheckedCreateWithoutUserInput>
}

export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.RefreshTokenWhereUniqueInput
  data: Prisma.XOR<Prisma.RefreshTokenUpdateWithoutUserInput, Prisma.RefreshTokenUncheckedUpdateWithoutUserInput>
}

export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.RefreshTokenScalarWhereInput
  data: Prisma.XOR<Prisma.RefreshTokenUpdateManyMutationInput, Prisma.RefreshTokenUncheckedUpdateManyWithoutUserInput>
}

export type RefreshTokenScalarWhereInput = {
  AND?: Prisma.RefreshTokenScalarWhereInput | Prisma.RefreshTokenScalarWhereInput[]
  OR?: Prisma.RefreshTokenScalarWhereInput[]
  NOT?: Prisma.RefreshTokenScalarWhereInput | Prisma.RefreshTokenScalarWhereInput[]
  id?: Prisma.UuidFilter<"RefreshToken"> | string
  token?: Prisma.StringFilter<"RefreshToken"> | string
  user_id?: Prisma.UuidFilter<"RefreshToken"> | string
  revoked?: Prisma.BoolFilter<"RefreshToken"> | boolean
  expires_at?: Prisma.DateTimeFilter<"RefreshToken"> | Date | string
  created_at?: Prisma.DateTimeFilter<"RefreshToken"> | Date | string
}

export type RefreshTokenCreateManyUserInput = {
  id?: string
  token: string
  revoked?: boolean
  expires_at: Date | string
  created_at?: Date | string
}

export type RefreshTokenUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RefreshTokenUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  revoked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  expires_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type RefreshTokenSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  user_id?: boolean
  revoked?: boolean
  expires_at?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["refreshToken"]>

export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  user_id?: boolean
  revoked?: boolean
  expires_at?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["refreshToken"]>

export type RefreshTokenSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  user_id?: boolean
  revoked?: boolean
  expires_at?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["refreshToken"]>

export type RefreshTokenSelectScalar = {
  id?: boolean
  token?: boolean
  user_id?: boolean
  revoked?: boolean
  expires_at?: boolean
  created_at?: boolean
}

export type RefreshTokenOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "token" | "user_id" | "revoked" | "expires_at" | "created_at", ExtArgs["result"]["refreshToken"]>
export type RefreshTokenInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type RefreshTokenIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $RefreshTokenPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RefreshToken"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    token: string
    user_id: string
    revoked: boolean
    expires_at: Date
    created_at: Date
  }, ExtArgs["result"]["refreshToken"]>
  composites: {}
}

export type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload, S>

export type RefreshTokenCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RefreshTokenCountAggregateInputType | true
  }

export interface RefreshTokenDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
  /**
   * Find zero or one RefreshToken that matches the filter.
   * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
   * @example
   * // Get one RefreshToken
   * const refreshToken = await prisma.refreshToken.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RefreshTokenFindUniqueArgs>(args: Prisma.SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
   * @example
   * // Get one RefreshToken
   * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RefreshToken that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
   * @example
   * // Get one RefreshToken
   * const refreshToken = await prisma.refreshToken.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RefreshTokenFindFirstArgs>(args?: Prisma.SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RefreshToken that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
   * @example
   * // Get one RefreshToken
   * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RefreshTokens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RefreshTokens
   * const refreshTokens = await prisma.refreshToken.findMany()
   * 
   * // Get first 10 RefreshTokens
   * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RefreshTokenFindManyArgs>(args?: Prisma.SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RefreshToken.
   * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
   * @example
   * // Create one RefreshToken
   * const RefreshToken = await prisma.refreshToken.create({
   *   data: {
   *     // ... data to create a RefreshToken
   *   }
   * })
   * 
   */
  create<T extends RefreshTokenCreateArgs>(args: Prisma.SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RefreshTokens.
   * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
   * @example
   * // Create many RefreshTokens
   * const refreshToken = await prisma.refreshToken.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RefreshTokenCreateManyArgs>(args?: Prisma.SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RefreshTokens and returns the data saved in the database.
   * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
   * @example
   * // Create many RefreshTokens
   * const refreshToken = await prisma.refreshToken.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RefreshTokens and only return the `id`
   * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RefreshToken.
   * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
   * @example
   * // Delete one RefreshToken
   * const RefreshToken = await prisma.refreshToken.delete({
   *   where: {
   *     // ... filter to delete one RefreshToken
   *   }
   * })
   * 
   */
  delete<T extends RefreshTokenDeleteArgs>(args: Prisma.SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RefreshToken.
   * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
   * @example
   * // Update one RefreshToken
   * const refreshToken = await prisma.refreshToken.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RefreshTokenUpdateArgs>(args: Prisma.SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RefreshTokens.
   * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
   * @example
   * // Delete a few RefreshTokens
   * const { count } = await prisma.refreshToken.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: Prisma.SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RefreshTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RefreshTokens
   * const refreshToken = await prisma.refreshToken.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RefreshTokenUpdateManyArgs>(args: Prisma.SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RefreshTokens and returns the data updated in the database.
   * @param {RefreshTokenUpdateManyAndReturnArgs} args - Arguments to update many RefreshTokens.
   * @example
   * // Update many RefreshTokens
   * const refreshToken = await prisma.refreshToken.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RefreshTokens and only return the `id`
   * const refreshTokenWithIdOnly = await prisma.refreshToken.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RefreshTokenUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RefreshTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RefreshToken.
   * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
   * @example
   * // Update or create a RefreshToken
   * const refreshToken = await prisma.refreshToken.upsert({
   *   create: {
   *     // ... data to create a RefreshToken
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RefreshToken we want to update
   *   }
   * })
   */
  upsert<T extends RefreshTokenUpsertArgs>(args: Prisma.SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma.Prisma__RefreshTokenClient<runtime.Types.Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RefreshTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
   * @example
   * // Count the number of RefreshTokens
   * const count = await prisma.refreshToken.count({
   *   where: {
   *     // ... the filter for the RefreshTokens we want to count
   *   }
   * })
  **/
  count<T extends RefreshTokenCountArgs>(
    args?: Prisma.Subset<T, RefreshTokenCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RefreshToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RefreshTokenAggregateArgs>(args: Prisma.Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

  /**
   * Group by RefreshToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefreshTokenGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RefreshTokenGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
      : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RefreshToken model
 */
readonly fields: RefreshTokenFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RefreshToken.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RefreshToken model
 */
export interface RefreshTokenFieldRefs {
  readonly id: Prisma.FieldRef<"RefreshToken", 'String'>
  readonly token: Prisma.FieldRef<"RefreshToken", 'String'>
  readonly user_id: Prisma.FieldRef<"RefreshToken", 'String'>
  readonly revoked: Prisma.FieldRef<"RefreshToken", 'Boolean'>
  readonly expires_at: Prisma.FieldRef<"RefreshToken", 'DateTime'>
  readonly created_at: Prisma.FieldRef<"RefreshToken", 'DateTime'>
}
    

// Custom InputTypes
/**
 * RefreshToken findUnique
 */
export type RefreshTokenFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * Filter, which RefreshToken to fetch.
   */
  where: Prisma.RefreshTokenWhereUniqueInput
}

/**
 * RefreshToken findUniqueOrThrow
 */
export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * Filter, which RefreshToken to fetch.
   */
  where: Prisma.RefreshTokenWhereUniqueInput
}

/**
 * RefreshToken findFirst
 */
export type RefreshTokenFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * Filter, which RefreshToken to fetch.
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshTokens to fetch.
   */
  orderBy?: Prisma.RefreshTokenOrderByWithRelationInput | Prisma.RefreshTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RefreshTokens.
   */
  cursor?: Prisma.RefreshTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RefreshTokens.
   */
  distinct?: Prisma.RefreshTokenScalarFieldEnum | Prisma.RefreshTokenScalarFieldEnum[]
}

/**
 * RefreshToken findFirstOrThrow
 */
export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * Filter, which RefreshToken to fetch.
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshTokens to fetch.
   */
  orderBy?: Prisma.RefreshTokenOrderByWithRelationInput | Prisma.RefreshTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RefreshTokens.
   */
  cursor?: Prisma.RefreshTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RefreshTokens.
   */
  distinct?: Prisma.RefreshTokenScalarFieldEnum | Prisma.RefreshTokenScalarFieldEnum[]
}

/**
 * RefreshToken findMany
 */
export type RefreshTokenFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * Filter, which RefreshTokens to fetch.
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefreshTokens to fetch.
   */
  orderBy?: Prisma.RefreshTokenOrderByWithRelationInput | Prisma.RefreshTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RefreshTokens.
   */
  cursor?: Prisma.RefreshTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefreshTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefreshTokens.
   */
  skip?: number
  distinct?: Prisma.RefreshTokenScalarFieldEnum | Prisma.RefreshTokenScalarFieldEnum[]
}

/**
 * RefreshToken create
 */
export type RefreshTokenCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * The data needed to create a RefreshToken.
   */
  data: Prisma.XOR<Prisma.RefreshTokenCreateInput, Prisma.RefreshTokenUncheckedCreateInput>
}

/**
 * RefreshToken createMany
 */
export type RefreshTokenCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RefreshTokens.
   */
  data: Prisma.RefreshTokenCreateManyInput | Prisma.RefreshTokenCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RefreshToken createManyAndReturn
 */
export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * The data used to create many RefreshTokens.
   */
  data: Prisma.RefreshTokenCreateManyInput | Prisma.RefreshTokenCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RefreshToken update
 */
export type RefreshTokenUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * The data needed to update a RefreshToken.
   */
  data: Prisma.XOR<Prisma.RefreshTokenUpdateInput, Prisma.RefreshTokenUncheckedUpdateInput>
  /**
   * Choose, which RefreshToken to update.
   */
  where: Prisma.RefreshTokenWhereUniqueInput
}

/**
 * RefreshToken updateMany
 */
export type RefreshTokenUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RefreshTokens.
   */
  data: Prisma.XOR<Prisma.RefreshTokenUpdateManyMutationInput, Prisma.RefreshTokenUncheckedUpdateManyInput>
  /**
   * Filter which RefreshTokens to update
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * Limit how many RefreshTokens to update.
   */
  limit?: number
}

/**
 * RefreshToken updateManyAndReturn
 */
export type RefreshTokenUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * The data used to update RefreshTokens.
   */
  data: Prisma.XOR<Prisma.RefreshTokenUpdateManyMutationInput, Prisma.RefreshTokenUncheckedUpdateManyInput>
  /**
   * Filter which RefreshTokens to update
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * Limit how many RefreshTokens to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RefreshToken upsert
 */
export type RefreshTokenUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * The filter to search for the RefreshToken to update in case it exists.
   */
  where: Prisma.RefreshTokenWhereUniqueInput
  /**
   * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
   */
  create: Prisma.XOR<Prisma.RefreshTokenCreateInput, Prisma.RefreshTokenUncheckedCreateInput>
  /**
   * In case the RefreshToken was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RefreshTokenUpdateInput, Prisma.RefreshTokenUncheckedUpdateInput>
}

/**
 * RefreshToken delete
 */
export type RefreshTokenDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
  /**
   * Filter which RefreshToken to delete.
   */
  where: Prisma.RefreshTokenWhereUniqueInput
}

/**
 * RefreshToken deleteMany
 */
export type RefreshTokenDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RefreshTokens to delete
   */
  where?: Prisma.RefreshTokenWhereInput
  /**
   * Limit how many RefreshTokens to delete.
   */
  limit?: number
}

/**
 * RefreshToken without action
 */
export type RefreshTokenDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefreshToken
   */
  select?: Prisma.RefreshTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefreshToken
   */
  omit?: Prisma.RefreshTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefreshTokenInclude<ExtArgs> | null
}
