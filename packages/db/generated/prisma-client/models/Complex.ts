
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Complex` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Complex
 * 
 */
export type ComplexModel = runtime.Types.Result.DefaultSelection<Prisma.$ComplexPayload>

export type AggregateComplex = {
  _count: ComplexCountAggregateOutputType | null
  _min: ComplexMinAggregateOutputType | null
  _max: ComplexMaxAggregateOutputType | null
}

export type ComplexMinAggregateOutputType = {
  id: string | null
  name: string | null
  address: string | null
  sport_type: $Enums.SportType | null
  owner_id: string | null
  is_active: boolean | null
  complex_image: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ComplexMaxAggregateOutputType = {
  id: string | null
  name: string | null
  address: string | null
  sport_type: $Enums.SportType | null
  owner_id: string | null
  is_active: boolean | null
  complex_image: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ComplexCountAggregateOutputType = {
  id: number
  name: number
  address: number
  sport_type: number
  owner_id: number
  is_active: number
  complex_image: number
  created_at: number
  updated_at: number
  _all: number
}


export type ComplexMinAggregateInputType = {
  id?: true
  name?: true
  address?: true
  sport_type?: true
  owner_id?: true
  is_active?: true
  complex_image?: true
  created_at?: true
  updated_at?: true
}

export type ComplexMaxAggregateInputType = {
  id?: true
  name?: true
  address?: true
  sport_type?: true
  owner_id?: true
  is_active?: true
  complex_image?: true
  created_at?: true
  updated_at?: true
}

export type ComplexCountAggregateInputType = {
  id?: true
  name?: true
  address?: true
  sport_type?: true
  owner_id?: true
  is_active?: true
  complex_image?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type ComplexAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Complex to aggregate.
   */
  where?: Prisma.ComplexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complexes to fetch.
   */
  orderBy?: Prisma.ComplexOrderByWithRelationInput | Prisma.ComplexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ComplexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complexes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complexes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Complexes
  **/
  _count?: true | ComplexCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ComplexMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ComplexMaxAggregateInputType
}

export type GetComplexAggregateType<T extends ComplexAggregateArgs> = {
      [P in keyof T & keyof AggregateComplex]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateComplex[P]>
    : Prisma.GetScalarType<T[P], AggregateComplex[P]>
}




export type ComplexGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ComplexWhereInput
  orderBy?: Prisma.ComplexOrderByWithAggregationInput | Prisma.ComplexOrderByWithAggregationInput[]
  by: Prisma.ComplexScalarFieldEnum[] | Prisma.ComplexScalarFieldEnum
  having?: Prisma.ComplexScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ComplexCountAggregateInputType | true
  _min?: ComplexMinAggregateInputType
  _max?: ComplexMaxAggregateInputType
}

export type ComplexGroupByOutputType = {
  id: string
  name: string
  address: string
  sport_type: $Enums.SportType
  owner_id: string
  is_active: boolean
  complex_image: string | null
  created_at: Date
  updated_at: Date
  _count: ComplexCountAggregateOutputType | null
  _min: ComplexMinAggregateOutputType | null
  _max: ComplexMaxAggregateOutputType | null
}

type GetComplexGroupByPayload<T extends ComplexGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ComplexGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ComplexGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ComplexGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ComplexGroupByOutputType[P]>
      }
    >
  >



export type ComplexWhereInput = {
  AND?: Prisma.ComplexWhereInput | Prisma.ComplexWhereInput[]
  OR?: Prisma.ComplexWhereInput[]
  NOT?: Prisma.ComplexWhereInput | Prisma.ComplexWhereInput[]
  id?: Prisma.UuidFilter<"Complex"> | string
  name?: Prisma.StringFilter<"Complex"> | string
  address?: Prisma.StringFilter<"Complex"> | string
  sport_type?: Prisma.EnumSportTypeFilter<"Complex"> | $Enums.SportType
  owner_id?: Prisma.UuidFilter<"Complex"> | string
  is_active?: Prisma.BoolFilter<"Complex"> | boolean
  complex_image?: Prisma.StringNullableFilter<"Complex"> | string | null
  created_at?: Prisma.DateTimeFilter<"Complex"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Complex"> | Date | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  sub_fields?: Prisma.SubFieldListRelationFilter
}

export type ComplexOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  sport_type?: Prisma.SortOrder
  owner_id?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  complex_image?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  owner?: Prisma.UserOrderByWithRelationInput
  sub_fields?: Prisma.SubFieldOrderByRelationAggregateInput
}

export type ComplexWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ComplexWhereInput | Prisma.ComplexWhereInput[]
  OR?: Prisma.ComplexWhereInput[]
  NOT?: Prisma.ComplexWhereInput | Prisma.ComplexWhereInput[]
  name?: Prisma.StringFilter<"Complex"> | string
  address?: Prisma.StringFilter<"Complex"> | string
  sport_type?: Prisma.EnumSportTypeFilter<"Complex"> | $Enums.SportType
  owner_id?: Prisma.UuidFilter<"Complex"> | string
  is_active?: Prisma.BoolFilter<"Complex"> | boolean
  complex_image?: Prisma.StringNullableFilter<"Complex"> | string | null
  created_at?: Prisma.DateTimeFilter<"Complex"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Complex"> | Date | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  sub_fields?: Prisma.SubFieldListRelationFilter
}, "id">

export type ComplexOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  sport_type?: Prisma.SortOrder
  owner_id?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  complex_image?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.ComplexCountOrderByAggregateInput
  _max?: Prisma.ComplexMaxOrderByAggregateInput
  _min?: Prisma.ComplexMinOrderByAggregateInput
}

export type ComplexScalarWhereWithAggregatesInput = {
  AND?: Prisma.ComplexScalarWhereWithAggregatesInput | Prisma.ComplexScalarWhereWithAggregatesInput[]
  OR?: Prisma.ComplexScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ComplexScalarWhereWithAggregatesInput | Prisma.ComplexScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Complex"> | string
  name?: Prisma.StringWithAggregatesFilter<"Complex"> | string
  address?: Prisma.StringWithAggregatesFilter<"Complex"> | string
  sport_type?: Prisma.EnumSportTypeWithAggregatesFilter<"Complex"> | $Enums.SportType
  owner_id?: Prisma.UuidWithAggregatesFilter<"Complex"> | string
  is_active?: Prisma.BoolWithAggregatesFilter<"Complex"> | boolean
  complex_image?: Prisma.StringNullableWithAggregatesFilter<"Complex"> | string | null
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Complex"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"Complex"> | Date | string
}

export type ComplexCreateInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutComplexesInput
  sub_fields?: Prisma.SubFieldCreateNestedManyWithoutComplexInput
}

export type ComplexUncheckedCreateInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  owner_id: string
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  sub_fields?: Prisma.SubFieldUncheckedCreateNestedManyWithoutComplexInput
}

export type ComplexUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutComplexesNestedInput
  sub_fields?: Prisma.SubFieldUpdateManyWithoutComplexNestedInput
}

export type ComplexUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  owner_id?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sub_fields?: Prisma.SubFieldUncheckedUpdateManyWithoutComplexNestedInput
}

export type ComplexCreateManyInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  owner_id: string
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
}

export type ComplexUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplexUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  owner_id?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplexListRelationFilter = {
  every?: Prisma.ComplexWhereInput
  some?: Prisma.ComplexWhereInput
  none?: Prisma.ComplexWhereInput
}

export type ComplexOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ComplexCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  sport_type?: Prisma.SortOrder
  owner_id?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  complex_image?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ComplexMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  sport_type?: Prisma.SortOrder
  owner_id?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  complex_image?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ComplexMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  sport_type?: Prisma.SortOrder
  owner_id?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  complex_image?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ComplexScalarRelationFilter = {
  is?: Prisma.ComplexWhereInput
  isNot?: Prisma.ComplexWhereInput
}

export type ComplexCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.ComplexCreateWithoutOwnerInput, Prisma.ComplexUncheckedCreateWithoutOwnerInput> | Prisma.ComplexCreateWithoutOwnerInput[] | Prisma.ComplexUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ComplexCreateOrConnectWithoutOwnerInput | Prisma.ComplexCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.ComplexCreateManyOwnerInputEnvelope
  connect?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
}

export type ComplexUncheckedCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.ComplexCreateWithoutOwnerInput, Prisma.ComplexUncheckedCreateWithoutOwnerInput> | Prisma.ComplexCreateWithoutOwnerInput[] | Prisma.ComplexUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ComplexCreateOrConnectWithoutOwnerInput | Prisma.ComplexCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.ComplexCreateManyOwnerInputEnvelope
  connect?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
}

export type ComplexUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.ComplexCreateWithoutOwnerInput, Prisma.ComplexUncheckedCreateWithoutOwnerInput> | Prisma.ComplexCreateWithoutOwnerInput[] | Prisma.ComplexUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ComplexCreateOrConnectWithoutOwnerInput | Prisma.ComplexCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.ComplexUpsertWithWhereUniqueWithoutOwnerInput | Prisma.ComplexUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.ComplexCreateManyOwnerInputEnvelope
  set?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  disconnect?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  delete?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  connect?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  update?: Prisma.ComplexUpdateWithWhereUniqueWithoutOwnerInput | Prisma.ComplexUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.ComplexUpdateManyWithWhereWithoutOwnerInput | Prisma.ComplexUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.ComplexScalarWhereInput | Prisma.ComplexScalarWhereInput[]
}

export type ComplexUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.ComplexCreateWithoutOwnerInput, Prisma.ComplexUncheckedCreateWithoutOwnerInput> | Prisma.ComplexCreateWithoutOwnerInput[] | Prisma.ComplexUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ComplexCreateOrConnectWithoutOwnerInput | Prisma.ComplexCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.ComplexUpsertWithWhereUniqueWithoutOwnerInput | Prisma.ComplexUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.ComplexCreateManyOwnerInputEnvelope
  set?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  disconnect?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  delete?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  connect?: Prisma.ComplexWhereUniqueInput | Prisma.ComplexWhereUniqueInput[]
  update?: Prisma.ComplexUpdateWithWhereUniqueWithoutOwnerInput | Prisma.ComplexUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.ComplexUpdateManyWithWhereWithoutOwnerInput | Prisma.ComplexUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.ComplexScalarWhereInput | Prisma.ComplexScalarWhereInput[]
}

export type EnumSportTypeFieldUpdateOperationsInput = {
  set?: $Enums.SportType
}

export type ComplexCreateNestedOneWithoutSub_fieldsInput = {
  create?: Prisma.XOR<Prisma.ComplexCreateWithoutSub_fieldsInput, Prisma.ComplexUncheckedCreateWithoutSub_fieldsInput>
  connectOrCreate?: Prisma.ComplexCreateOrConnectWithoutSub_fieldsInput
  connect?: Prisma.ComplexWhereUniqueInput
}

export type ComplexUpdateOneRequiredWithoutSub_fieldsNestedInput = {
  create?: Prisma.XOR<Prisma.ComplexCreateWithoutSub_fieldsInput, Prisma.ComplexUncheckedCreateWithoutSub_fieldsInput>
  connectOrCreate?: Prisma.ComplexCreateOrConnectWithoutSub_fieldsInput
  upsert?: Prisma.ComplexUpsertWithoutSub_fieldsInput
  connect?: Prisma.ComplexWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ComplexUpdateToOneWithWhereWithoutSub_fieldsInput, Prisma.ComplexUpdateWithoutSub_fieldsInput>, Prisma.ComplexUncheckedUpdateWithoutSub_fieldsInput>
}

export type ComplexCreateWithoutOwnerInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  sub_fields?: Prisma.SubFieldCreateNestedManyWithoutComplexInput
}

export type ComplexUncheckedCreateWithoutOwnerInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  sub_fields?: Prisma.SubFieldUncheckedCreateNestedManyWithoutComplexInput
}

export type ComplexCreateOrConnectWithoutOwnerInput = {
  where: Prisma.ComplexWhereUniqueInput
  create: Prisma.XOR<Prisma.ComplexCreateWithoutOwnerInput, Prisma.ComplexUncheckedCreateWithoutOwnerInput>
}

export type ComplexCreateManyOwnerInputEnvelope = {
  data: Prisma.ComplexCreateManyOwnerInput | Prisma.ComplexCreateManyOwnerInput[]
  skipDuplicates?: boolean
}

export type ComplexUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.ComplexWhereUniqueInput
  update: Prisma.XOR<Prisma.ComplexUpdateWithoutOwnerInput, Prisma.ComplexUncheckedUpdateWithoutOwnerInput>
  create: Prisma.XOR<Prisma.ComplexCreateWithoutOwnerInput, Prisma.ComplexUncheckedCreateWithoutOwnerInput>
}

export type ComplexUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.ComplexWhereUniqueInput
  data: Prisma.XOR<Prisma.ComplexUpdateWithoutOwnerInput, Prisma.ComplexUncheckedUpdateWithoutOwnerInput>
}

export type ComplexUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.ComplexScalarWhereInput
  data: Prisma.XOR<Prisma.ComplexUpdateManyMutationInput, Prisma.ComplexUncheckedUpdateManyWithoutOwnerInput>
}

export type ComplexScalarWhereInput = {
  AND?: Prisma.ComplexScalarWhereInput | Prisma.ComplexScalarWhereInput[]
  OR?: Prisma.ComplexScalarWhereInput[]
  NOT?: Prisma.ComplexScalarWhereInput | Prisma.ComplexScalarWhereInput[]
  id?: Prisma.UuidFilter<"Complex"> | string
  name?: Prisma.StringFilter<"Complex"> | string
  address?: Prisma.StringFilter<"Complex"> | string
  sport_type?: Prisma.EnumSportTypeFilter<"Complex"> | $Enums.SportType
  owner_id?: Prisma.UuidFilter<"Complex"> | string
  is_active?: Prisma.BoolFilter<"Complex"> | boolean
  complex_image?: Prisma.StringNullableFilter<"Complex"> | string | null
  created_at?: Prisma.DateTimeFilter<"Complex"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Complex"> | Date | string
}

export type ComplexCreateWithoutSub_fieldsInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutComplexesInput
}

export type ComplexUncheckedCreateWithoutSub_fieldsInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  owner_id: string
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
}

export type ComplexCreateOrConnectWithoutSub_fieldsInput = {
  where: Prisma.ComplexWhereUniqueInput
  create: Prisma.XOR<Prisma.ComplexCreateWithoutSub_fieldsInput, Prisma.ComplexUncheckedCreateWithoutSub_fieldsInput>
}

export type ComplexUpsertWithoutSub_fieldsInput = {
  update: Prisma.XOR<Prisma.ComplexUpdateWithoutSub_fieldsInput, Prisma.ComplexUncheckedUpdateWithoutSub_fieldsInput>
  create: Prisma.XOR<Prisma.ComplexCreateWithoutSub_fieldsInput, Prisma.ComplexUncheckedCreateWithoutSub_fieldsInput>
  where?: Prisma.ComplexWhereInput
}

export type ComplexUpdateToOneWithWhereWithoutSub_fieldsInput = {
  where?: Prisma.ComplexWhereInput
  data: Prisma.XOR<Prisma.ComplexUpdateWithoutSub_fieldsInput, Prisma.ComplexUncheckedUpdateWithoutSub_fieldsInput>
}

export type ComplexUpdateWithoutSub_fieldsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutComplexesNestedInput
}

export type ComplexUncheckedUpdateWithoutSub_fieldsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  owner_id?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplexCreateManyOwnerInput = {
  id?: string
  name: string
  address: string
  sport_type: $Enums.SportType
  is_active?: boolean
  complex_image?: string | null
  created_at?: Date | string
  updated_at?: Date | string
}

export type ComplexUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sub_fields?: Prisma.SubFieldUpdateManyWithoutComplexNestedInput
}

export type ComplexUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sub_fields?: Prisma.SubFieldUncheckedUpdateManyWithoutComplexNestedInput
}

export type ComplexUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  sport_type?: Prisma.EnumSportTypeFieldUpdateOperationsInput | $Enums.SportType
  is_active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  complex_image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ComplexCountOutputType
 */

export type ComplexCountOutputType = {
  sub_fields: number
}

export type ComplexCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sub_fields?: boolean | ComplexCountOutputTypeCountSub_fieldsArgs
}

/**
 * ComplexCountOutputType without action
 */
export type ComplexCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ComplexCountOutputType
   */
  select?: Prisma.ComplexCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ComplexCountOutputType without action
 */
export type ComplexCountOutputTypeCountSub_fieldsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubFieldWhereInput
}


export type ComplexSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  sport_type?: boolean
  owner_id?: boolean
  is_active?: boolean
  complex_image?: boolean
  created_at?: boolean
  updated_at?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_fields?: boolean | Prisma.Complex$sub_fieldsArgs<ExtArgs>
  _count?: boolean | Prisma.ComplexCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["complex"]>

export type ComplexSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  sport_type?: boolean
  owner_id?: boolean
  is_active?: boolean
  complex_image?: boolean
  created_at?: boolean
  updated_at?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["complex"]>

export type ComplexSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  sport_type?: boolean
  owner_id?: boolean
  is_active?: boolean
  complex_image?: boolean
  created_at?: boolean
  updated_at?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["complex"]>

export type ComplexSelectScalar = {
  id?: boolean
  name?: boolean
  address?: boolean
  sport_type?: boolean
  owner_id?: boolean
  is_active?: boolean
  complex_image?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type ComplexOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "address" | "sport_type" | "owner_id" | "is_active" | "complex_image" | "created_at" | "updated_at", ExtArgs["result"]["complex"]>
export type ComplexInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_fields?: boolean | Prisma.Complex$sub_fieldsArgs<ExtArgs>
  _count?: boolean | Prisma.ComplexCountOutputTypeDefaultArgs<ExtArgs>
}
export type ComplexIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ComplexIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ComplexPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Complex"
  objects: {
    owner: Prisma.$UserPayload<ExtArgs>
    sub_fields: Prisma.$SubFieldPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    address: string
    sport_type: $Enums.SportType
    owner_id: string
    is_active: boolean
    complex_image: string | null
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["complex"]>
  composites: {}
}

export type ComplexGetPayload<S extends boolean | null | undefined | ComplexDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ComplexPayload, S>

export type ComplexCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ComplexFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ComplexCountAggregateInputType | true
  }

export interface ComplexDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Complex'], meta: { name: 'Complex' } }
  /**
   * Find zero or one Complex that matches the filter.
   * @param {ComplexFindUniqueArgs} args - Arguments to find a Complex
   * @example
   * // Get one Complex
   * const complex = await prisma.complex.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ComplexFindUniqueArgs>(args: Prisma.SelectSubset<T, ComplexFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Complex that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ComplexFindUniqueOrThrowArgs} args - Arguments to find a Complex
   * @example
   * // Get one Complex
   * const complex = await prisma.complex.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ComplexFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ComplexFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Complex that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexFindFirstArgs} args - Arguments to find a Complex
   * @example
   * // Get one Complex
   * const complex = await prisma.complex.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ComplexFindFirstArgs>(args?: Prisma.SelectSubset<T, ComplexFindFirstArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Complex that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexFindFirstOrThrowArgs} args - Arguments to find a Complex
   * @example
   * // Get one Complex
   * const complex = await prisma.complex.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ComplexFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ComplexFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Complexes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Complexes
   * const complexes = await prisma.complex.findMany()
   * 
   * // Get first 10 Complexes
   * const complexes = await prisma.complex.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const complexWithIdOnly = await prisma.complex.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ComplexFindManyArgs>(args?: Prisma.SelectSubset<T, ComplexFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Complex.
   * @param {ComplexCreateArgs} args - Arguments to create a Complex.
   * @example
   * // Create one Complex
   * const Complex = await prisma.complex.create({
   *   data: {
   *     // ... data to create a Complex
   *   }
   * })
   * 
   */
  create<T extends ComplexCreateArgs>(args: Prisma.SelectSubset<T, ComplexCreateArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Complexes.
   * @param {ComplexCreateManyArgs} args - Arguments to create many Complexes.
   * @example
   * // Create many Complexes
   * const complex = await prisma.complex.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ComplexCreateManyArgs>(args?: Prisma.SelectSubset<T, ComplexCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Complexes and returns the data saved in the database.
   * @param {ComplexCreateManyAndReturnArgs} args - Arguments to create many Complexes.
   * @example
   * // Create many Complexes
   * const complex = await prisma.complex.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Complexes and only return the `id`
   * const complexWithIdOnly = await prisma.complex.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ComplexCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ComplexCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Complex.
   * @param {ComplexDeleteArgs} args - Arguments to delete one Complex.
   * @example
   * // Delete one Complex
   * const Complex = await prisma.complex.delete({
   *   where: {
   *     // ... filter to delete one Complex
   *   }
   * })
   * 
   */
  delete<T extends ComplexDeleteArgs>(args: Prisma.SelectSubset<T, ComplexDeleteArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Complex.
   * @param {ComplexUpdateArgs} args - Arguments to update one Complex.
   * @example
   * // Update one Complex
   * const complex = await prisma.complex.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ComplexUpdateArgs>(args: Prisma.SelectSubset<T, ComplexUpdateArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Complexes.
   * @param {ComplexDeleteManyArgs} args - Arguments to filter Complexes to delete.
   * @example
   * // Delete a few Complexes
   * const { count } = await prisma.complex.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ComplexDeleteManyArgs>(args?: Prisma.SelectSubset<T, ComplexDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Complexes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Complexes
   * const complex = await prisma.complex.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ComplexUpdateManyArgs>(args: Prisma.SelectSubset<T, ComplexUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Complexes and returns the data updated in the database.
   * @param {ComplexUpdateManyAndReturnArgs} args - Arguments to update many Complexes.
   * @example
   * // Update many Complexes
   * const complex = await prisma.complex.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Complexes and only return the `id`
   * const complexWithIdOnly = await prisma.complex.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ComplexUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ComplexUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Complex.
   * @param {ComplexUpsertArgs} args - Arguments to update or create a Complex.
   * @example
   * // Update or create a Complex
   * const complex = await prisma.complex.upsert({
   *   create: {
   *     // ... data to create a Complex
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Complex we want to update
   *   }
   * })
   */
  upsert<T extends ComplexUpsertArgs>(args: Prisma.SelectSubset<T, ComplexUpsertArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Complexes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexCountArgs} args - Arguments to filter Complexes to count.
   * @example
   * // Count the number of Complexes
   * const count = await prisma.complex.count({
   *   where: {
   *     // ... the filter for the Complexes we want to count
   *   }
   * })
  **/
  count<T extends ComplexCountArgs>(
    args?: Prisma.Subset<T, ComplexCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ComplexCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Complex.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ComplexAggregateArgs>(args: Prisma.Subset<T, ComplexAggregateArgs>): Prisma.PrismaPromise<GetComplexAggregateType<T>>

  /**
   * Group by Complex.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplexGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ComplexGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ComplexGroupByArgs['orderBy'] }
      : { orderBy?: ComplexGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ComplexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Complex model
 */
readonly fields: ComplexFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Complex.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ComplexClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  owner<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  sub_fields<T extends Prisma.Complex$sub_fieldsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Complex$sub_fieldsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Complex model
 */
export interface ComplexFieldRefs {
  readonly id: Prisma.FieldRef<"Complex", 'String'>
  readonly name: Prisma.FieldRef<"Complex", 'String'>
  readonly address: Prisma.FieldRef<"Complex", 'String'>
  readonly sport_type: Prisma.FieldRef<"Complex", 'SportType'>
  readonly owner_id: Prisma.FieldRef<"Complex", 'String'>
  readonly is_active: Prisma.FieldRef<"Complex", 'Boolean'>
  readonly complex_image: Prisma.FieldRef<"Complex", 'String'>
  readonly created_at: Prisma.FieldRef<"Complex", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"Complex", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Complex findUnique
 */
export type ComplexFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * Filter, which Complex to fetch.
   */
  where: Prisma.ComplexWhereUniqueInput
}

/**
 * Complex findUniqueOrThrow
 */
export type ComplexFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * Filter, which Complex to fetch.
   */
  where: Prisma.ComplexWhereUniqueInput
}

/**
 * Complex findFirst
 */
export type ComplexFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * Filter, which Complex to fetch.
   */
  where?: Prisma.ComplexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complexes to fetch.
   */
  orderBy?: Prisma.ComplexOrderByWithRelationInput | Prisma.ComplexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Complexes.
   */
  cursor?: Prisma.ComplexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complexes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complexes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Complexes.
   */
  distinct?: Prisma.ComplexScalarFieldEnum | Prisma.ComplexScalarFieldEnum[]
}

/**
 * Complex findFirstOrThrow
 */
export type ComplexFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * Filter, which Complex to fetch.
   */
  where?: Prisma.ComplexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complexes to fetch.
   */
  orderBy?: Prisma.ComplexOrderByWithRelationInput | Prisma.ComplexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Complexes.
   */
  cursor?: Prisma.ComplexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complexes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complexes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Complexes.
   */
  distinct?: Prisma.ComplexScalarFieldEnum | Prisma.ComplexScalarFieldEnum[]
}

/**
 * Complex findMany
 */
export type ComplexFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * Filter, which Complexes to fetch.
   */
  where?: Prisma.ComplexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complexes to fetch.
   */
  orderBy?: Prisma.ComplexOrderByWithRelationInput | Prisma.ComplexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Complexes.
   */
  cursor?: Prisma.ComplexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complexes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complexes.
   */
  skip?: number
  distinct?: Prisma.ComplexScalarFieldEnum | Prisma.ComplexScalarFieldEnum[]
}

/**
 * Complex create
 */
export type ComplexCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * The data needed to create a Complex.
   */
  data: Prisma.XOR<Prisma.ComplexCreateInput, Prisma.ComplexUncheckedCreateInput>
}

/**
 * Complex createMany
 */
export type ComplexCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Complexes.
   */
  data: Prisma.ComplexCreateManyInput | Prisma.ComplexCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Complex createManyAndReturn
 */
export type ComplexCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * The data used to create many Complexes.
   */
  data: Prisma.ComplexCreateManyInput | Prisma.ComplexCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Complex update
 */
export type ComplexUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * The data needed to update a Complex.
   */
  data: Prisma.XOR<Prisma.ComplexUpdateInput, Prisma.ComplexUncheckedUpdateInput>
  /**
   * Choose, which Complex to update.
   */
  where: Prisma.ComplexWhereUniqueInput
}

/**
 * Complex updateMany
 */
export type ComplexUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Complexes.
   */
  data: Prisma.XOR<Prisma.ComplexUpdateManyMutationInput, Prisma.ComplexUncheckedUpdateManyInput>
  /**
   * Filter which Complexes to update
   */
  where?: Prisma.ComplexWhereInput
  /**
   * Limit how many Complexes to update.
   */
  limit?: number
}

/**
 * Complex updateManyAndReturn
 */
export type ComplexUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * The data used to update Complexes.
   */
  data: Prisma.XOR<Prisma.ComplexUpdateManyMutationInput, Prisma.ComplexUncheckedUpdateManyInput>
  /**
   * Filter which Complexes to update
   */
  where?: Prisma.ComplexWhereInput
  /**
   * Limit how many Complexes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Complex upsert
 */
export type ComplexUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * The filter to search for the Complex to update in case it exists.
   */
  where: Prisma.ComplexWhereUniqueInput
  /**
   * In case the Complex found by the `where` argument doesn't exist, create a new Complex with this data.
   */
  create: Prisma.XOR<Prisma.ComplexCreateInput, Prisma.ComplexUncheckedCreateInput>
  /**
   * In case the Complex was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ComplexUpdateInput, Prisma.ComplexUncheckedUpdateInput>
}

/**
 * Complex delete
 */
export type ComplexDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
  /**
   * Filter which Complex to delete.
   */
  where: Prisma.ComplexWhereUniqueInput
}

/**
 * Complex deleteMany
 */
export type ComplexDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Complexes to delete
   */
  where?: Prisma.ComplexWhereInput
  /**
   * Limit how many Complexes to delete.
   */
  limit?: number
}

/**
 * Complex.sub_fields
 */
export type Complex$sub_fieldsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  where?: Prisma.SubFieldWhereInput
  orderBy?: Prisma.SubFieldOrderByWithRelationInput | Prisma.SubFieldOrderByWithRelationInput[]
  cursor?: Prisma.SubFieldWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SubFieldScalarFieldEnum | Prisma.SubFieldScalarFieldEnum[]
}

/**
 * Complex without action
 */
export type ComplexDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complex
   */
  select?: Prisma.ComplexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complex
   */
  omit?: Prisma.ComplexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplexInclude<ExtArgs> | null
}
