
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Booking` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Booking
 * 
 */
export type BookingModel = runtime.Types.Result.DefaultSelection<Prisma.$BookingPayload>

export type AggregateBooking = {
  _count: BookingCountAggregateOutputType | null
  _avg: BookingAvgAggregateOutputType | null
  _sum: BookingSumAggregateOutputType | null
  _min: BookingMinAggregateOutputType | null
  _max: BookingMaxAggregateOutputType | null
}

export type BookingAvgAggregateOutputType = {
  total_price: runtime.Decimal | null
}

export type BookingSumAggregateOutputType = {
  total_price: runtime.Decimal | null
}

export type BookingMinAggregateOutputType = {
  id: string | null
  start_time: Date | null
  end_time: Date | null
  total_price: runtime.Decimal | null
  status: $Enums.BookingStatus | null
  created_at: Date | null
  pair_at: Date | null
  user_id: string | null
  sub_field_id: string | null
}

export type BookingMaxAggregateOutputType = {
  id: string | null
  start_time: Date | null
  end_time: Date | null
  total_price: runtime.Decimal | null
  status: $Enums.BookingStatus | null
  created_at: Date | null
  pair_at: Date | null
  user_id: string | null
  sub_field_id: string | null
}

export type BookingCountAggregateOutputType = {
  id: number
  start_time: number
  end_time: number
  total_price: number
  status: number
  created_at: number
  pair_at: number
  user_id: number
  sub_field_id: number
  _all: number
}


export type BookingAvgAggregateInputType = {
  total_price?: true
}

export type BookingSumAggregateInputType = {
  total_price?: true
}

export type BookingMinAggregateInputType = {
  id?: true
  start_time?: true
  end_time?: true
  total_price?: true
  status?: true
  created_at?: true
  pair_at?: true
  user_id?: true
  sub_field_id?: true
}

export type BookingMaxAggregateInputType = {
  id?: true
  start_time?: true
  end_time?: true
  total_price?: true
  status?: true
  created_at?: true
  pair_at?: true
  user_id?: true
  sub_field_id?: true
}

export type BookingCountAggregateInputType = {
  id?: true
  start_time?: true
  end_time?: true
  total_price?: true
  status?: true
  created_at?: true
  pair_at?: true
  user_id?: true
  sub_field_id?: true
  _all?: true
}

export type BookingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Booking to aggregate.
   */
  where?: Prisma.BookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingOrderByWithRelationInput | Prisma.BookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Bookings
  **/
  _count?: true | BookingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BookingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BookingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BookingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BookingMaxAggregateInputType
}

export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
      [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBooking[P]>
    : Prisma.GetScalarType<T[P], AggregateBooking[P]>
}




export type BookingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingWhereInput
  orderBy?: Prisma.BookingOrderByWithAggregationInput | Prisma.BookingOrderByWithAggregationInput[]
  by: Prisma.BookingScalarFieldEnum[] | Prisma.BookingScalarFieldEnum
  having?: Prisma.BookingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BookingCountAggregateInputType | true
  _avg?: BookingAvgAggregateInputType
  _sum?: BookingSumAggregateInputType
  _min?: BookingMinAggregateInputType
  _max?: BookingMaxAggregateInputType
}

export type BookingGroupByOutputType = {
  id: string
  start_time: Date
  end_time: Date
  total_price: runtime.Decimal
  status: $Enums.BookingStatus
  created_at: Date
  pair_at: Date | null
  user_id: string
  sub_field_id: string
  _count: BookingCountAggregateOutputType | null
  _avg: BookingAvgAggregateOutputType | null
  _sum: BookingSumAggregateOutputType | null
  _min: BookingMinAggregateOutputType | null
  _max: BookingMaxAggregateOutputType | null
}

type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookingGroupByOutputType[P]>
      }
    >
  >



export type BookingWhereInput = {
  AND?: Prisma.BookingWhereInput | Prisma.BookingWhereInput[]
  OR?: Prisma.BookingWhereInput[]
  NOT?: Prisma.BookingWhereInput | Prisma.BookingWhereInput[]
  id?: Prisma.UuidFilter<"Booking"> | string
  start_time?: Prisma.DateTimeFilter<"Booking"> | Date | string
  end_time?: Prisma.DateTimeFilter<"Booking"> | Date | string
  total_price?: Prisma.DecimalFilter<"Booking"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFilter<"Booking"> | Date | string
  pair_at?: Prisma.DateTimeNullableFilter<"Booking"> | Date | string | null
  user_id?: Prisma.UuidFilter<"Booking"> | string
  sub_field_id?: Prisma.UuidFilter<"Booking"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  sub_field?: Prisma.XOR<Prisma.SubFieldScalarRelationFilter, Prisma.SubFieldWhereInput>
  payment?: Prisma.XOR<Prisma.PaymentNullableScalarRelationFilter, Prisma.PaymentWhereInput> | null
}

export type BookingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  start_time?: Prisma.SortOrder
  end_time?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  pair_at?: Prisma.SortOrderInput | Prisma.SortOrder
  user_id?: Prisma.SortOrder
  sub_field_id?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  sub_field?: Prisma.SubFieldOrderByWithRelationInput
  payment?: Prisma.PaymentOrderByWithRelationInput
}

export type BookingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BookingWhereInput | Prisma.BookingWhereInput[]
  OR?: Prisma.BookingWhereInput[]
  NOT?: Prisma.BookingWhereInput | Prisma.BookingWhereInput[]
  start_time?: Prisma.DateTimeFilter<"Booking"> | Date | string
  end_time?: Prisma.DateTimeFilter<"Booking"> | Date | string
  total_price?: Prisma.DecimalFilter<"Booking"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFilter<"Booking"> | Date | string
  pair_at?: Prisma.DateTimeNullableFilter<"Booking"> | Date | string | null
  user_id?: Prisma.UuidFilter<"Booking"> | string
  sub_field_id?: Prisma.UuidFilter<"Booking"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  sub_field?: Prisma.XOR<Prisma.SubFieldScalarRelationFilter, Prisma.SubFieldWhereInput>
  payment?: Prisma.XOR<Prisma.PaymentNullableScalarRelationFilter, Prisma.PaymentWhereInput> | null
}, "id">

export type BookingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  start_time?: Prisma.SortOrder
  end_time?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  pair_at?: Prisma.SortOrderInput | Prisma.SortOrder
  user_id?: Prisma.SortOrder
  sub_field_id?: Prisma.SortOrder
  _count?: Prisma.BookingCountOrderByAggregateInput
  _avg?: Prisma.BookingAvgOrderByAggregateInput
  _max?: Prisma.BookingMaxOrderByAggregateInput
  _min?: Prisma.BookingMinOrderByAggregateInput
  _sum?: Prisma.BookingSumOrderByAggregateInput
}

export type BookingScalarWhereWithAggregatesInput = {
  AND?: Prisma.BookingScalarWhereWithAggregatesInput | Prisma.BookingScalarWhereWithAggregatesInput[]
  OR?: Prisma.BookingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BookingScalarWhereWithAggregatesInput | Prisma.BookingScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Booking"> | string
  start_time?: Prisma.DateTimeWithAggregatesFilter<"Booking"> | Date | string
  end_time?: Prisma.DateTimeWithAggregatesFilter<"Booking"> | Date | string
  total_price?: Prisma.DecimalWithAggregatesFilter<"Booking"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusWithAggregatesFilter<"Booking"> | $Enums.BookingStatus
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Booking"> | Date | string
  pair_at?: Prisma.DateTimeNullableWithAggregatesFilter<"Booking"> | Date | string | null
  user_id?: Prisma.UuidWithAggregatesFilter<"Booking"> | string
  sub_field_id?: Prisma.UuidWithAggregatesFilter<"Booking"> | string
}

export type BookingCreateInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutBookingsInput
  sub_field: Prisma.SubFieldCreateNestedOneWithoutBookingsInput
  payment?: Prisma.PaymentCreateNestedOneWithoutBookingInput
}

export type BookingUncheckedCreateInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user_id: string
  sub_field_id: string
  payment?: Prisma.PaymentUncheckedCreateNestedOneWithoutBookingInput
}

export type BookingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutBookingsNestedInput
  sub_field?: Prisma.SubFieldUpdateOneRequiredWithoutBookingsNestedInput
  payment?: Prisma.PaymentUpdateOneWithoutBookingNestedInput
}

export type BookingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  sub_field_id?: Prisma.StringFieldUpdateOperationsInput | string
  payment?: Prisma.PaymentUncheckedUpdateOneWithoutBookingNestedInput
}

export type BookingCreateManyInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user_id: string
  sub_field_id: string
}

export type BookingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type BookingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  sub_field_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BookingListRelationFilter = {
  every?: Prisma.BookingWhereInput
  some?: Prisma.BookingWhereInput
  none?: Prisma.BookingWhereInput
}

export type BookingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BookingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  start_time?: Prisma.SortOrder
  end_time?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  pair_at?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  sub_field_id?: Prisma.SortOrder
}

export type BookingAvgOrderByAggregateInput = {
  total_price?: Prisma.SortOrder
}

export type BookingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  start_time?: Prisma.SortOrder
  end_time?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  pair_at?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  sub_field_id?: Prisma.SortOrder
}

export type BookingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  start_time?: Prisma.SortOrder
  end_time?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  pair_at?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  sub_field_id?: Prisma.SortOrder
}

export type BookingSumOrderByAggregateInput = {
  total_price?: Prisma.SortOrder
}

export type BookingScalarRelationFilter = {
  is?: Prisma.BookingWhereInput
  isNot?: Prisma.BookingWhereInput
}

export type BookingCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutUserInput, Prisma.BookingUncheckedCreateWithoutUserInput> | Prisma.BookingCreateWithoutUserInput[] | Prisma.BookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutUserInput | Prisma.BookingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BookingCreateManyUserInputEnvelope
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
}

export type BookingUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutUserInput, Prisma.BookingUncheckedCreateWithoutUserInput> | Prisma.BookingCreateWithoutUserInput[] | Prisma.BookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutUserInput | Prisma.BookingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BookingCreateManyUserInputEnvelope
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
}

export type BookingUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutUserInput, Prisma.BookingUncheckedCreateWithoutUserInput> | Prisma.BookingCreateWithoutUserInput[] | Prisma.BookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutUserInput | Prisma.BookingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BookingUpsertWithWhereUniqueWithoutUserInput | Prisma.BookingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BookingCreateManyUserInputEnvelope
  set?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  disconnect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  delete?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  update?: Prisma.BookingUpdateWithWhereUniqueWithoutUserInput | Prisma.BookingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BookingUpdateManyWithWhereWithoutUserInput | Prisma.BookingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BookingScalarWhereInput | Prisma.BookingScalarWhereInput[]
}

export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutUserInput, Prisma.BookingUncheckedCreateWithoutUserInput> | Prisma.BookingCreateWithoutUserInput[] | Prisma.BookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutUserInput | Prisma.BookingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BookingUpsertWithWhereUniqueWithoutUserInput | Prisma.BookingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BookingCreateManyUserInputEnvelope
  set?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  disconnect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  delete?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  update?: Prisma.BookingUpdateWithWhereUniqueWithoutUserInput | Prisma.BookingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BookingUpdateManyWithWhereWithoutUserInput | Prisma.BookingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BookingScalarWhereInput | Prisma.BookingScalarWhereInput[]
}

export type BookingCreateNestedManyWithoutSub_fieldInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutSub_fieldInput, Prisma.BookingUncheckedCreateWithoutSub_fieldInput> | Prisma.BookingCreateWithoutSub_fieldInput[] | Prisma.BookingUncheckedCreateWithoutSub_fieldInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutSub_fieldInput | Prisma.BookingCreateOrConnectWithoutSub_fieldInput[]
  createMany?: Prisma.BookingCreateManySub_fieldInputEnvelope
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
}

export type BookingUncheckedCreateNestedManyWithoutSub_fieldInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutSub_fieldInput, Prisma.BookingUncheckedCreateWithoutSub_fieldInput> | Prisma.BookingCreateWithoutSub_fieldInput[] | Prisma.BookingUncheckedCreateWithoutSub_fieldInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutSub_fieldInput | Prisma.BookingCreateOrConnectWithoutSub_fieldInput[]
  createMany?: Prisma.BookingCreateManySub_fieldInputEnvelope
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
}

export type BookingUpdateManyWithoutSub_fieldNestedInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutSub_fieldInput, Prisma.BookingUncheckedCreateWithoutSub_fieldInput> | Prisma.BookingCreateWithoutSub_fieldInput[] | Prisma.BookingUncheckedCreateWithoutSub_fieldInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutSub_fieldInput | Prisma.BookingCreateOrConnectWithoutSub_fieldInput[]
  upsert?: Prisma.BookingUpsertWithWhereUniqueWithoutSub_fieldInput | Prisma.BookingUpsertWithWhereUniqueWithoutSub_fieldInput[]
  createMany?: Prisma.BookingCreateManySub_fieldInputEnvelope
  set?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  disconnect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  delete?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  update?: Prisma.BookingUpdateWithWhereUniqueWithoutSub_fieldInput | Prisma.BookingUpdateWithWhereUniqueWithoutSub_fieldInput[]
  updateMany?: Prisma.BookingUpdateManyWithWhereWithoutSub_fieldInput | Prisma.BookingUpdateManyWithWhereWithoutSub_fieldInput[]
  deleteMany?: Prisma.BookingScalarWhereInput | Prisma.BookingScalarWhereInput[]
}

export type BookingUncheckedUpdateManyWithoutSub_fieldNestedInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutSub_fieldInput, Prisma.BookingUncheckedCreateWithoutSub_fieldInput> | Prisma.BookingCreateWithoutSub_fieldInput[] | Prisma.BookingUncheckedCreateWithoutSub_fieldInput[]
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutSub_fieldInput | Prisma.BookingCreateOrConnectWithoutSub_fieldInput[]
  upsert?: Prisma.BookingUpsertWithWhereUniqueWithoutSub_fieldInput | Prisma.BookingUpsertWithWhereUniqueWithoutSub_fieldInput[]
  createMany?: Prisma.BookingCreateManySub_fieldInputEnvelope
  set?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  disconnect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  delete?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  connect?: Prisma.BookingWhereUniqueInput | Prisma.BookingWhereUniqueInput[]
  update?: Prisma.BookingUpdateWithWhereUniqueWithoutSub_fieldInput | Prisma.BookingUpdateWithWhereUniqueWithoutSub_fieldInput[]
  updateMany?: Prisma.BookingUpdateManyWithWhereWithoutSub_fieldInput | Prisma.BookingUpdateManyWithWhereWithoutSub_fieldInput[]
  deleteMany?: Prisma.BookingScalarWhereInput | Prisma.BookingScalarWhereInput[]
}

export type EnumBookingStatusFieldUpdateOperationsInput = {
  set?: $Enums.BookingStatus
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type BookingCreateNestedOneWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutPaymentInput, Prisma.BookingUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutPaymentInput
  connect?: Prisma.BookingWhereUniqueInput
}

export type BookingUpdateOneRequiredWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.BookingCreateWithoutPaymentInput, Prisma.BookingUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.BookingCreateOrConnectWithoutPaymentInput
  upsert?: Prisma.BookingUpsertWithoutPaymentInput
  connect?: Prisma.BookingWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BookingUpdateToOneWithWhereWithoutPaymentInput, Prisma.BookingUpdateWithoutPaymentInput>, Prisma.BookingUncheckedUpdateWithoutPaymentInput>
}

export type BookingCreateWithoutUserInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  sub_field: Prisma.SubFieldCreateNestedOneWithoutBookingsInput
  payment?: Prisma.PaymentCreateNestedOneWithoutBookingInput
}

export type BookingUncheckedCreateWithoutUserInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  sub_field_id: string
  payment?: Prisma.PaymentUncheckedCreateNestedOneWithoutBookingInput
}

export type BookingCreateOrConnectWithoutUserInput = {
  where: Prisma.BookingWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingCreateWithoutUserInput, Prisma.BookingUncheckedCreateWithoutUserInput>
}

export type BookingCreateManyUserInputEnvelope = {
  data: Prisma.BookingCreateManyUserInput | Prisma.BookingCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type BookingUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BookingWhereUniqueInput
  update: Prisma.XOR<Prisma.BookingUpdateWithoutUserInput, Prisma.BookingUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BookingCreateWithoutUserInput, Prisma.BookingUncheckedCreateWithoutUserInput>
}

export type BookingUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BookingWhereUniqueInput
  data: Prisma.XOR<Prisma.BookingUpdateWithoutUserInput, Prisma.BookingUncheckedUpdateWithoutUserInput>
}

export type BookingUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BookingScalarWhereInput
  data: Prisma.XOR<Prisma.BookingUpdateManyMutationInput, Prisma.BookingUncheckedUpdateManyWithoutUserInput>
}

export type BookingScalarWhereInput = {
  AND?: Prisma.BookingScalarWhereInput | Prisma.BookingScalarWhereInput[]
  OR?: Prisma.BookingScalarWhereInput[]
  NOT?: Prisma.BookingScalarWhereInput | Prisma.BookingScalarWhereInput[]
  id?: Prisma.UuidFilter<"Booking"> | string
  start_time?: Prisma.DateTimeFilter<"Booking"> | Date | string
  end_time?: Prisma.DateTimeFilter<"Booking"> | Date | string
  total_price?: Prisma.DecimalFilter<"Booking"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFilter<"Booking"> | Date | string
  pair_at?: Prisma.DateTimeNullableFilter<"Booking"> | Date | string | null
  user_id?: Prisma.UuidFilter<"Booking"> | string
  sub_field_id?: Prisma.UuidFilter<"Booking"> | string
}

export type BookingCreateWithoutSub_fieldInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutBookingsInput
  payment?: Prisma.PaymentCreateNestedOneWithoutBookingInput
}

export type BookingUncheckedCreateWithoutSub_fieldInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user_id: string
  payment?: Prisma.PaymentUncheckedCreateNestedOneWithoutBookingInput
}

export type BookingCreateOrConnectWithoutSub_fieldInput = {
  where: Prisma.BookingWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingCreateWithoutSub_fieldInput, Prisma.BookingUncheckedCreateWithoutSub_fieldInput>
}

export type BookingCreateManySub_fieldInputEnvelope = {
  data: Prisma.BookingCreateManySub_fieldInput | Prisma.BookingCreateManySub_fieldInput[]
  skipDuplicates?: boolean
}

export type BookingUpsertWithWhereUniqueWithoutSub_fieldInput = {
  where: Prisma.BookingWhereUniqueInput
  update: Prisma.XOR<Prisma.BookingUpdateWithoutSub_fieldInput, Prisma.BookingUncheckedUpdateWithoutSub_fieldInput>
  create: Prisma.XOR<Prisma.BookingCreateWithoutSub_fieldInput, Prisma.BookingUncheckedCreateWithoutSub_fieldInput>
}

export type BookingUpdateWithWhereUniqueWithoutSub_fieldInput = {
  where: Prisma.BookingWhereUniqueInput
  data: Prisma.XOR<Prisma.BookingUpdateWithoutSub_fieldInput, Prisma.BookingUncheckedUpdateWithoutSub_fieldInput>
}

export type BookingUpdateManyWithWhereWithoutSub_fieldInput = {
  where: Prisma.BookingScalarWhereInput
  data: Prisma.XOR<Prisma.BookingUpdateManyMutationInput, Prisma.BookingUncheckedUpdateManyWithoutSub_fieldInput>
}

export type BookingCreateWithoutPaymentInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutBookingsInput
  sub_field: Prisma.SubFieldCreateNestedOneWithoutBookingsInput
}

export type BookingUncheckedCreateWithoutPaymentInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user_id: string
  sub_field_id: string
}

export type BookingCreateOrConnectWithoutPaymentInput = {
  where: Prisma.BookingWhereUniqueInput
  create: Prisma.XOR<Prisma.BookingCreateWithoutPaymentInput, Prisma.BookingUncheckedCreateWithoutPaymentInput>
}

export type BookingUpsertWithoutPaymentInput = {
  update: Prisma.XOR<Prisma.BookingUpdateWithoutPaymentInput, Prisma.BookingUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.BookingCreateWithoutPaymentInput, Prisma.BookingUncheckedCreateWithoutPaymentInput>
  where?: Prisma.BookingWhereInput
}

export type BookingUpdateToOneWithWhereWithoutPaymentInput = {
  where?: Prisma.BookingWhereInput
  data: Prisma.XOR<Prisma.BookingUpdateWithoutPaymentInput, Prisma.BookingUncheckedUpdateWithoutPaymentInput>
}

export type BookingUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutBookingsNestedInput
  sub_field?: Prisma.SubFieldUpdateOneRequiredWithoutBookingsNestedInput
}

export type BookingUncheckedUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  sub_field_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BookingCreateManyUserInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  sub_field_id: string
}

export type BookingUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sub_field?: Prisma.SubFieldUpdateOneRequiredWithoutBookingsNestedInput
  payment?: Prisma.PaymentUpdateOneWithoutBookingNestedInput
}

export type BookingUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sub_field_id?: Prisma.StringFieldUpdateOperationsInput | string
  payment?: Prisma.PaymentUncheckedUpdateOneWithoutBookingNestedInput
}

export type BookingUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sub_field_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BookingCreateManySub_fieldInput = {
  id?: string
  start_time: Date | string
  end_time: Date | string
  total_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: $Enums.BookingStatus
  created_at?: Date | string
  pair_at?: Date | string | null
  user_id: string
}

export type BookingUpdateWithoutSub_fieldInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutBookingsNestedInput
  payment?: Prisma.PaymentUpdateOneWithoutBookingNestedInput
}

export type BookingUncheckedUpdateWithoutSub_fieldInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  payment?: Prisma.PaymentUncheckedUpdateOneWithoutBookingNestedInput
}

export type BookingUncheckedUpdateManyWithoutSub_fieldInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  start_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  end_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  total_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pair_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
}



export type BookingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  start_time?: boolean
  end_time?: boolean
  total_price?: boolean
  status?: boolean
  created_at?: boolean
  pair_at?: boolean
  user_id?: boolean
  sub_field_id?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_field?: boolean | Prisma.SubFieldDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.Booking$paymentArgs<ExtArgs>
}, ExtArgs["result"]["booking"]>

export type BookingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  start_time?: boolean
  end_time?: boolean
  total_price?: boolean
  status?: boolean
  created_at?: boolean
  pair_at?: boolean
  user_id?: boolean
  sub_field_id?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_field?: boolean | Prisma.SubFieldDefaultArgs<ExtArgs>
}, ExtArgs["result"]["booking"]>

export type BookingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  start_time?: boolean
  end_time?: boolean
  total_price?: boolean
  status?: boolean
  created_at?: boolean
  pair_at?: boolean
  user_id?: boolean
  sub_field_id?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_field?: boolean | Prisma.SubFieldDefaultArgs<ExtArgs>
}, ExtArgs["result"]["booking"]>

export type BookingSelectScalar = {
  id?: boolean
  start_time?: boolean
  end_time?: boolean
  total_price?: boolean
  status?: boolean
  created_at?: boolean
  pair_at?: boolean
  user_id?: boolean
  sub_field_id?: boolean
}

export type BookingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "start_time" | "end_time" | "total_price" | "status" | "created_at" | "pair_at" | "user_id" | "sub_field_id", ExtArgs["result"]["booking"]>
export type BookingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_field?: boolean | Prisma.SubFieldDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.Booking$paymentArgs<ExtArgs>
}
export type BookingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_field?: boolean | Prisma.SubFieldDefaultArgs<ExtArgs>
}
export type BookingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  sub_field?: boolean | Prisma.SubFieldDefaultArgs<ExtArgs>
}

export type $BookingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Booking"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    sub_field: Prisma.$SubFieldPayload<ExtArgs>
    payment: Prisma.$PaymentPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    start_time: Date
    end_time: Date
    total_price: runtime.Decimal
    status: $Enums.BookingStatus
    created_at: Date
    pair_at: Date | null
    user_id: string
    sub_field_id: string
  }, ExtArgs["result"]["booking"]>
  composites: {}
}

export type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BookingPayload, S>

export type BookingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BookingCountAggregateInputType | true
  }

export interface BookingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
  /**
   * Find zero or one Booking that matches the filter.
   * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingFindUniqueArgs>(args: Prisma.SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Booking that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingFindFirstArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingFindFirstArgs>(args?: Prisma.SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Booking that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bookings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bookings
   * const bookings = await prisma.booking.findMany()
   * 
   * // Get first 10 Bookings
   * const bookings = await prisma.booking.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BookingFindManyArgs>(args?: Prisma.SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Booking.
   * @param {BookingCreateArgs} args - Arguments to create a Booking.
   * @example
   * // Create one Booking
   * const Booking = await prisma.booking.create({
   *   data: {
   *     // ... data to create a Booking
   *   }
   * })
   * 
   */
  create<T extends BookingCreateArgs>(args: Prisma.SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bookings.
   * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
   * @example
   * // Create many Bookings
   * const booking = await prisma.booking.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BookingCreateManyArgs>(args?: Prisma.SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Bookings and returns the data saved in the database.
   * @param {BookingCreateManyAndReturnArgs} args - Arguments to create many Bookings.
   * @example
   * // Create many Bookings
   * const booking = await prisma.booking.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Bookings and only return the `id`
   * const bookingWithIdOnly = await prisma.booking.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BookingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Booking.
   * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
   * @example
   * // Delete one Booking
   * const Booking = await prisma.booking.delete({
   *   where: {
   *     // ... filter to delete one Booking
   *   }
   * })
   * 
   */
  delete<T extends BookingDeleteArgs>(args: Prisma.SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Booking.
   * @param {BookingUpdateArgs} args - Arguments to update one Booking.
   * @example
   * // Update one Booking
   * const booking = await prisma.booking.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BookingUpdateArgs>(args: Prisma.SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bookings.
   * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
   * @example
   * // Delete a few Bookings
   * const { count } = await prisma.booking.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BookingDeleteManyArgs>(args?: Prisma.SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bookings
   * const booking = await prisma.booking.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BookingUpdateManyArgs>(args: Prisma.SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bookings and returns the data updated in the database.
   * @param {BookingUpdateManyAndReturnArgs} args - Arguments to update many Bookings.
   * @example
   * // Update many Bookings
   * const booking = await prisma.booking.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Bookings and only return the `id`
   * const bookingWithIdOnly = await prisma.booking.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BookingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BookingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Booking.
   * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
   * @example
   * // Update or create a Booking
   * const booking = await prisma.booking.upsert({
   *   create: {
   *     // ... data to create a Booking
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Booking we want to update
   *   }
   * })
   */
  upsert<T extends BookingUpsertArgs>(args: Prisma.SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma.Prisma__BookingClient<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
   * @example
   * // Count the number of Bookings
   * const count = await prisma.booking.count({
   *   where: {
   *     // ... the filter for the Bookings we want to count
   *   }
   * })
  **/
  count<T extends BookingCountArgs>(
    args?: Prisma.Subset<T, BookingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BookingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Booking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BookingAggregateArgs>(args: Prisma.Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

  /**
   * Group by Booking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BookingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingGroupByArgs['orderBy'] }
      : { orderBy?: BookingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Booking model
 */
readonly fields: BookingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Booking.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  sub_field<T extends Prisma.SubFieldDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubFieldDefaultArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  payment<T extends Prisma.Booking$paymentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Booking$paymentArgs<ExtArgs>>): Prisma.Prisma__PaymentClient<runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Booking model
 */
export interface BookingFieldRefs {
  readonly id: Prisma.FieldRef<"Booking", 'String'>
  readonly start_time: Prisma.FieldRef<"Booking", 'DateTime'>
  readonly end_time: Prisma.FieldRef<"Booking", 'DateTime'>
  readonly total_price: Prisma.FieldRef<"Booking", 'Decimal'>
  readonly status: Prisma.FieldRef<"Booking", 'BookingStatus'>
  readonly created_at: Prisma.FieldRef<"Booking", 'DateTime'>
  readonly pair_at: Prisma.FieldRef<"Booking", 'DateTime'>
  readonly user_id: Prisma.FieldRef<"Booking", 'String'>
  readonly sub_field_id: Prisma.FieldRef<"Booking", 'String'>
}
    

// Custom InputTypes
/**
 * Booking findUnique
 */
export type BookingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * Filter, which Booking to fetch.
   */
  where: Prisma.BookingWhereUniqueInput
}

/**
 * Booking findUniqueOrThrow
 */
export type BookingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * Filter, which Booking to fetch.
   */
  where: Prisma.BookingWhereUniqueInput
}

/**
 * Booking findFirst
 */
export type BookingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * Filter, which Booking to fetch.
   */
  where?: Prisma.BookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingOrderByWithRelationInput | Prisma.BookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bookings.
   */
  cursor?: Prisma.BookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bookings.
   */
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * Booking findFirstOrThrow
 */
export type BookingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * Filter, which Booking to fetch.
   */
  where?: Prisma.BookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingOrderByWithRelationInput | Prisma.BookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bookings.
   */
  cursor?: Prisma.BookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bookings.
   */
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * Booking findMany
 */
export type BookingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * Filter, which Bookings to fetch.
   */
  where?: Prisma.BookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bookings to fetch.
   */
  orderBy?: Prisma.BookingOrderByWithRelationInput | Prisma.BookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Bookings.
   */
  cursor?: Prisma.BookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bookings.
   */
  skip?: number
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * Booking create
 */
export type BookingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * The data needed to create a Booking.
   */
  data: Prisma.XOR<Prisma.BookingCreateInput, Prisma.BookingUncheckedCreateInput>
}

/**
 * Booking createMany
 */
export type BookingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Bookings.
   */
  data: Prisma.BookingCreateManyInput | Prisma.BookingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Booking createManyAndReturn
 */
export type BookingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * The data used to create many Bookings.
   */
  data: Prisma.BookingCreateManyInput | Prisma.BookingCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Booking update
 */
export type BookingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * The data needed to update a Booking.
   */
  data: Prisma.XOR<Prisma.BookingUpdateInput, Prisma.BookingUncheckedUpdateInput>
  /**
   * Choose, which Booking to update.
   */
  where: Prisma.BookingWhereUniqueInput
}

/**
 * Booking updateMany
 */
export type BookingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Bookings.
   */
  data: Prisma.XOR<Prisma.BookingUpdateManyMutationInput, Prisma.BookingUncheckedUpdateManyInput>
  /**
   * Filter which Bookings to update
   */
  where?: Prisma.BookingWhereInput
  /**
   * Limit how many Bookings to update.
   */
  limit?: number
}

/**
 * Booking updateManyAndReturn
 */
export type BookingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * The data used to update Bookings.
   */
  data: Prisma.XOR<Prisma.BookingUpdateManyMutationInput, Prisma.BookingUncheckedUpdateManyInput>
  /**
   * Filter which Bookings to update
   */
  where?: Prisma.BookingWhereInput
  /**
   * Limit how many Bookings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Booking upsert
 */
export type BookingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * The filter to search for the Booking to update in case it exists.
   */
  where: Prisma.BookingWhereUniqueInput
  /**
   * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
   */
  create: Prisma.XOR<Prisma.BookingCreateInput, Prisma.BookingUncheckedCreateInput>
  /**
   * In case the Booking was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookingUpdateInput, Prisma.BookingUncheckedUpdateInput>
}

/**
 * Booking delete
 */
export type BookingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  /**
   * Filter which Booking to delete.
   */
  where: Prisma.BookingWhereUniqueInput
}

/**
 * Booking deleteMany
 */
export type BookingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Bookings to delete
   */
  where?: Prisma.BookingWhereInput
  /**
   * Limit how many Bookings to delete.
   */
  limit?: number
}

/**
 * Booking.payment
 */
export type Booking$paymentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Payment
   */
  select?: Prisma.PaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Payment
   */
  omit?: Prisma.PaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInclude<ExtArgs> | null
  where?: Prisma.PaymentWhereInput
}

/**
 * Booking without action
 */
export type BookingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
}
