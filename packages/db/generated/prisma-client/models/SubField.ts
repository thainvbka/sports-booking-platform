
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SubField` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model SubField
 * 
 */
export type SubFieldModel = runtime.Types.Result.DefaultSelection<Prisma.$SubFieldPayload>

export type AggregateSubField = {
  _count: SubFieldCountAggregateOutputType | null
  _avg: SubFieldAvgAggregateOutputType | null
  _sum: SubFieldSumAggregateOutputType | null
  _min: SubFieldMinAggregateOutputType | null
  _max: SubFieldMaxAggregateOutputType | null
}

export type SubFieldAvgAggregateOutputType = {
  capacity: number | null
}

export type SubFieldSumAggregateOutputType = {
  capacity: number | null
}

export type SubFieldMinAggregateOutputType = {
  id: string | null
  name: string | null
  capacity: number | null
  complex_id: string | null
}

export type SubFieldMaxAggregateOutputType = {
  id: string | null
  name: string | null
  capacity: number | null
  complex_id: string | null
}

export type SubFieldCountAggregateOutputType = {
  id: number
  name: number
  capacity: number
  complex_id: number
  _all: number
}


export type SubFieldAvgAggregateInputType = {
  capacity?: true
}

export type SubFieldSumAggregateInputType = {
  capacity?: true
}

export type SubFieldMinAggregateInputType = {
  id?: true
  name?: true
  capacity?: true
  complex_id?: true
}

export type SubFieldMaxAggregateInputType = {
  id?: true
  name?: true
  capacity?: true
  complex_id?: true
}

export type SubFieldCountAggregateInputType = {
  id?: true
  name?: true
  capacity?: true
  complex_id?: true
  _all?: true
}

export type SubFieldAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SubField to aggregate.
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubFields to fetch.
   */
  orderBy?: Prisma.SubFieldOrderByWithRelationInput | Prisma.SubFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SubFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubFields.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SubFields
  **/
  _count?: true | SubFieldCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SubFieldAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SubFieldSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SubFieldMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SubFieldMaxAggregateInputType
}

export type GetSubFieldAggregateType<T extends SubFieldAggregateArgs> = {
      [P in keyof T & keyof AggregateSubField]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubField[P]>
    : Prisma.GetScalarType<T[P], AggregateSubField[P]>
}




export type SubFieldGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubFieldWhereInput
  orderBy?: Prisma.SubFieldOrderByWithAggregationInput | Prisma.SubFieldOrderByWithAggregationInput[]
  by: Prisma.SubFieldScalarFieldEnum[] | Prisma.SubFieldScalarFieldEnum
  having?: Prisma.SubFieldScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SubFieldCountAggregateInputType | true
  _avg?: SubFieldAvgAggregateInputType
  _sum?: SubFieldSumAggregateInputType
  _min?: SubFieldMinAggregateInputType
  _max?: SubFieldMaxAggregateInputType
}

export type SubFieldGroupByOutputType = {
  id: string
  name: string
  capacity: number
  complex_id: string
  _count: SubFieldCountAggregateOutputType | null
  _avg: SubFieldAvgAggregateOutputType | null
  _sum: SubFieldSumAggregateOutputType | null
  _min: SubFieldMinAggregateOutputType | null
  _max: SubFieldMaxAggregateOutputType | null
}

type GetSubFieldGroupByPayload<T extends SubFieldGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SubFieldGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SubFieldGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubFieldGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubFieldGroupByOutputType[P]>
      }
    >
  >



export type SubFieldWhereInput = {
  AND?: Prisma.SubFieldWhereInput | Prisma.SubFieldWhereInput[]
  OR?: Prisma.SubFieldWhereInput[]
  NOT?: Prisma.SubFieldWhereInput | Prisma.SubFieldWhereInput[]
  id?: Prisma.UuidFilter<"SubField"> | string
  name?: Prisma.StringFilter<"SubField"> | string
  capacity?: Prisma.IntFilter<"SubField"> | number
  complex_id?: Prisma.UuidFilter<"SubField"> | string
  complex?: Prisma.XOR<Prisma.ComplexScalarRelationFilter, Prisma.ComplexWhereInput>
  bookings?: Prisma.BookingListRelationFilter
  pricing_rules?: Prisma.PricingRuleListRelationFilter
}

export type SubFieldOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  complex_id?: Prisma.SortOrder
  complex?: Prisma.ComplexOrderByWithRelationInput
  bookings?: Prisma.BookingOrderByRelationAggregateInput
  pricing_rules?: Prisma.PricingRuleOrderByRelationAggregateInput
}

export type SubFieldWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  complex_id_name?: Prisma.SubFieldComplex_idNameCompoundUniqueInput
  AND?: Prisma.SubFieldWhereInput | Prisma.SubFieldWhereInput[]
  OR?: Prisma.SubFieldWhereInput[]
  NOT?: Prisma.SubFieldWhereInput | Prisma.SubFieldWhereInput[]
  name?: Prisma.StringFilter<"SubField"> | string
  capacity?: Prisma.IntFilter<"SubField"> | number
  complex_id?: Prisma.UuidFilter<"SubField"> | string
  complex?: Prisma.XOR<Prisma.ComplexScalarRelationFilter, Prisma.ComplexWhereInput>
  bookings?: Prisma.BookingListRelationFilter
  pricing_rules?: Prisma.PricingRuleListRelationFilter
}, "id" | "complex_id_name">

export type SubFieldOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  complex_id?: Prisma.SortOrder
  _count?: Prisma.SubFieldCountOrderByAggregateInput
  _avg?: Prisma.SubFieldAvgOrderByAggregateInput
  _max?: Prisma.SubFieldMaxOrderByAggregateInput
  _min?: Prisma.SubFieldMinOrderByAggregateInput
  _sum?: Prisma.SubFieldSumOrderByAggregateInput
}

export type SubFieldScalarWhereWithAggregatesInput = {
  AND?: Prisma.SubFieldScalarWhereWithAggregatesInput | Prisma.SubFieldScalarWhereWithAggregatesInput[]
  OR?: Prisma.SubFieldScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SubFieldScalarWhereWithAggregatesInput | Prisma.SubFieldScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"SubField"> | string
  name?: Prisma.StringWithAggregatesFilter<"SubField"> | string
  capacity?: Prisma.IntWithAggregatesFilter<"SubField"> | number
  complex_id?: Prisma.UuidWithAggregatesFilter<"SubField"> | string
}

export type SubFieldCreateInput = {
  id?: string
  name: string
  capacity: number
  complex: Prisma.ComplexCreateNestedOneWithoutSub_fieldsInput
  bookings?: Prisma.BookingCreateNestedManyWithoutSub_fieldInput
  pricing_rules?: Prisma.PricingRuleCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldUncheckedCreateInput = {
  id?: string
  name: string
  capacity: number
  complex_id: string
  bookings?: Prisma.BookingUncheckedCreateNestedManyWithoutSub_fieldInput
  pricing_rules?: Prisma.PricingRuleUncheckedCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex?: Prisma.ComplexUpdateOneRequiredWithoutSub_fieldsNestedInput
  bookings?: Prisma.BookingUpdateManyWithoutSub_fieldNestedInput
  pricing_rules?: Prisma.PricingRuleUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex_id?: Prisma.StringFieldUpdateOperationsInput | string
  bookings?: Prisma.BookingUncheckedUpdateManyWithoutSub_fieldNestedInput
  pricing_rules?: Prisma.PricingRuleUncheckedUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldCreateManyInput = {
  id?: string
  name: string
  capacity: number
  complex_id: string
}

export type SubFieldUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type SubFieldUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubFieldListRelationFilter = {
  every?: Prisma.SubFieldWhereInput
  some?: Prisma.SubFieldWhereInput
  none?: Prisma.SubFieldWhereInput
}

export type SubFieldOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SubFieldComplex_idNameCompoundUniqueInput = {
  complex_id: string
  name: string
}

export type SubFieldCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  complex_id?: Prisma.SortOrder
}

export type SubFieldAvgOrderByAggregateInput = {
  capacity?: Prisma.SortOrder
}

export type SubFieldMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  complex_id?: Prisma.SortOrder
}

export type SubFieldMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  complex_id?: Prisma.SortOrder
}

export type SubFieldSumOrderByAggregateInput = {
  capacity?: Prisma.SortOrder
}

export type SubFieldScalarRelationFilter = {
  is?: Prisma.SubFieldWhereInput
  isNot?: Prisma.SubFieldWhereInput
}

export type SubFieldCreateNestedManyWithoutComplexInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutComplexInput, Prisma.SubFieldUncheckedCreateWithoutComplexInput> | Prisma.SubFieldCreateWithoutComplexInput[] | Prisma.SubFieldUncheckedCreateWithoutComplexInput[]
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutComplexInput | Prisma.SubFieldCreateOrConnectWithoutComplexInput[]
  createMany?: Prisma.SubFieldCreateManyComplexInputEnvelope
  connect?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
}

export type SubFieldUncheckedCreateNestedManyWithoutComplexInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutComplexInput, Prisma.SubFieldUncheckedCreateWithoutComplexInput> | Prisma.SubFieldCreateWithoutComplexInput[] | Prisma.SubFieldUncheckedCreateWithoutComplexInput[]
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutComplexInput | Prisma.SubFieldCreateOrConnectWithoutComplexInput[]
  createMany?: Prisma.SubFieldCreateManyComplexInputEnvelope
  connect?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
}

export type SubFieldUpdateManyWithoutComplexNestedInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutComplexInput, Prisma.SubFieldUncheckedCreateWithoutComplexInput> | Prisma.SubFieldCreateWithoutComplexInput[] | Prisma.SubFieldUncheckedCreateWithoutComplexInput[]
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutComplexInput | Prisma.SubFieldCreateOrConnectWithoutComplexInput[]
  upsert?: Prisma.SubFieldUpsertWithWhereUniqueWithoutComplexInput | Prisma.SubFieldUpsertWithWhereUniqueWithoutComplexInput[]
  createMany?: Prisma.SubFieldCreateManyComplexInputEnvelope
  set?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  disconnect?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  delete?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  connect?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  update?: Prisma.SubFieldUpdateWithWhereUniqueWithoutComplexInput | Prisma.SubFieldUpdateWithWhereUniqueWithoutComplexInput[]
  updateMany?: Prisma.SubFieldUpdateManyWithWhereWithoutComplexInput | Prisma.SubFieldUpdateManyWithWhereWithoutComplexInput[]
  deleteMany?: Prisma.SubFieldScalarWhereInput | Prisma.SubFieldScalarWhereInput[]
}

export type SubFieldUncheckedUpdateManyWithoutComplexNestedInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutComplexInput, Prisma.SubFieldUncheckedCreateWithoutComplexInput> | Prisma.SubFieldCreateWithoutComplexInput[] | Prisma.SubFieldUncheckedCreateWithoutComplexInput[]
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutComplexInput | Prisma.SubFieldCreateOrConnectWithoutComplexInput[]
  upsert?: Prisma.SubFieldUpsertWithWhereUniqueWithoutComplexInput | Prisma.SubFieldUpsertWithWhereUniqueWithoutComplexInput[]
  createMany?: Prisma.SubFieldCreateManyComplexInputEnvelope
  set?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  disconnect?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  delete?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  connect?: Prisma.SubFieldWhereUniqueInput | Prisma.SubFieldWhereUniqueInput[]
  update?: Prisma.SubFieldUpdateWithWhereUniqueWithoutComplexInput | Prisma.SubFieldUpdateWithWhereUniqueWithoutComplexInput[]
  updateMany?: Prisma.SubFieldUpdateManyWithWhereWithoutComplexInput | Prisma.SubFieldUpdateManyWithWhereWithoutComplexInput[]
  deleteMany?: Prisma.SubFieldScalarWhereInput | Prisma.SubFieldScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type SubFieldCreateNestedOneWithoutPricing_rulesInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutPricing_rulesInput, Prisma.SubFieldUncheckedCreateWithoutPricing_rulesInput>
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutPricing_rulesInput
  connect?: Prisma.SubFieldWhereUniqueInput
}

export type SubFieldUpdateOneRequiredWithoutPricing_rulesNestedInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutPricing_rulesInput, Prisma.SubFieldUncheckedCreateWithoutPricing_rulesInput>
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutPricing_rulesInput
  upsert?: Prisma.SubFieldUpsertWithoutPricing_rulesInput
  connect?: Prisma.SubFieldWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SubFieldUpdateToOneWithWhereWithoutPricing_rulesInput, Prisma.SubFieldUpdateWithoutPricing_rulesInput>, Prisma.SubFieldUncheckedUpdateWithoutPricing_rulesInput>
}

export type SubFieldCreateNestedOneWithoutBookingsInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutBookingsInput, Prisma.SubFieldUncheckedCreateWithoutBookingsInput>
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutBookingsInput
  connect?: Prisma.SubFieldWhereUniqueInput
}

export type SubFieldUpdateOneRequiredWithoutBookingsNestedInput = {
  create?: Prisma.XOR<Prisma.SubFieldCreateWithoutBookingsInput, Prisma.SubFieldUncheckedCreateWithoutBookingsInput>
  connectOrCreate?: Prisma.SubFieldCreateOrConnectWithoutBookingsInput
  upsert?: Prisma.SubFieldUpsertWithoutBookingsInput
  connect?: Prisma.SubFieldWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SubFieldUpdateToOneWithWhereWithoutBookingsInput, Prisma.SubFieldUpdateWithoutBookingsInput>, Prisma.SubFieldUncheckedUpdateWithoutBookingsInput>
}

export type SubFieldCreateWithoutComplexInput = {
  id?: string
  name: string
  capacity: number
  bookings?: Prisma.BookingCreateNestedManyWithoutSub_fieldInput
  pricing_rules?: Prisma.PricingRuleCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldUncheckedCreateWithoutComplexInput = {
  id?: string
  name: string
  capacity: number
  bookings?: Prisma.BookingUncheckedCreateNestedManyWithoutSub_fieldInput
  pricing_rules?: Prisma.PricingRuleUncheckedCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldCreateOrConnectWithoutComplexInput = {
  where: Prisma.SubFieldWhereUniqueInput
  create: Prisma.XOR<Prisma.SubFieldCreateWithoutComplexInput, Prisma.SubFieldUncheckedCreateWithoutComplexInput>
}

export type SubFieldCreateManyComplexInputEnvelope = {
  data: Prisma.SubFieldCreateManyComplexInput | Prisma.SubFieldCreateManyComplexInput[]
  skipDuplicates?: boolean
}

export type SubFieldUpsertWithWhereUniqueWithoutComplexInput = {
  where: Prisma.SubFieldWhereUniqueInput
  update: Prisma.XOR<Prisma.SubFieldUpdateWithoutComplexInput, Prisma.SubFieldUncheckedUpdateWithoutComplexInput>
  create: Prisma.XOR<Prisma.SubFieldCreateWithoutComplexInput, Prisma.SubFieldUncheckedCreateWithoutComplexInput>
}

export type SubFieldUpdateWithWhereUniqueWithoutComplexInput = {
  where: Prisma.SubFieldWhereUniqueInput
  data: Prisma.XOR<Prisma.SubFieldUpdateWithoutComplexInput, Prisma.SubFieldUncheckedUpdateWithoutComplexInput>
}

export type SubFieldUpdateManyWithWhereWithoutComplexInput = {
  where: Prisma.SubFieldScalarWhereInput
  data: Prisma.XOR<Prisma.SubFieldUpdateManyMutationInput, Prisma.SubFieldUncheckedUpdateManyWithoutComplexInput>
}

export type SubFieldScalarWhereInput = {
  AND?: Prisma.SubFieldScalarWhereInput | Prisma.SubFieldScalarWhereInput[]
  OR?: Prisma.SubFieldScalarWhereInput[]
  NOT?: Prisma.SubFieldScalarWhereInput | Prisma.SubFieldScalarWhereInput[]
  id?: Prisma.UuidFilter<"SubField"> | string
  name?: Prisma.StringFilter<"SubField"> | string
  capacity?: Prisma.IntFilter<"SubField"> | number
  complex_id?: Prisma.UuidFilter<"SubField"> | string
}

export type SubFieldCreateWithoutPricing_rulesInput = {
  id?: string
  name: string
  capacity: number
  complex: Prisma.ComplexCreateNestedOneWithoutSub_fieldsInput
  bookings?: Prisma.BookingCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldUncheckedCreateWithoutPricing_rulesInput = {
  id?: string
  name: string
  capacity: number
  complex_id: string
  bookings?: Prisma.BookingUncheckedCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldCreateOrConnectWithoutPricing_rulesInput = {
  where: Prisma.SubFieldWhereUniqueInput
  create: Prisma.XOR<Prisma.SubFieldCreateWithoutPricing_rulesInput, Prisma.SubFieldUncheckedCreateWithoutPricing_rulesInput>
}

export type SubFieldUpsertWithoutPricing_rulesInput = {
  update: Prisma.XOR<Prisma.SubFieldUpdateWithoutPricing_rulesInput, Prisma.SubFieldUncheckedUpdateWithoutPricing_rulesInput>
  create: Prisma.XOR<Prisma.SubFieldCreateWithoutPricing_rulesInput, Prisma.SubFieldUncheckedCreateWithoutPricing_rulesInput>
  where?: Prisma.SubFieldWhereInput
}

export type SubFieldUpdateToOneWithWhereWithoutPricing_rulesInput = {
  where?: Prisma.SubFieldWhereInput
  data: Prisma.XOR<Prisma.SubFieldUpdateWithoutPricing_rulesInput, Prisma.SubFieldUncheckedUpdateWithoutPricing_rulesInput>
}

export type SubFieldUpdateWithoutPricing_rulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex?: Prisma.ComplexUpdateOneRequiredWithoutSub_fieldsNestedInput
  bookings?: Prisma.BookingUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldUncheckedUpdateWithoutPricing_rulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex_id?: Prisma.StringFieldUpdateOperationsInput | string
  bookings?: Prisma.BookingUncheckedUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldCreateWithoutBookingsInput = {
  id?: string
  name: string
  capacity: number
  complex: Prisma.ComplexCreateNestedOneWithoutSub_fieldsInput
  pricing_rules?: Prisma.PricingRuleCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldUncheckedCreateWithoutBookingsInput = {
  id?: string
  name: string
  capacity: number
  complex_id: string
  pricing_rules?: Prisma.PricingRuleUncheckedCreateNestedManyWithoutSub_fieldInput
}

export type SubFieldCreateOrConnectWithoutBookingsInput = {
  where: Prisma.SubFieldWhereUniqueInput
  create: Prisma.XOR<Prisma.SubFieldCreateWithoutBookingsInput, Prisma.SubFieldUncheckedCreateWithoutBookingsInput>
}

export type SubFieldUpsertWithoutBookingsInput = {
  update: Prisma.XOR<Prisma.SubFieldUpdateWithoutBookingsInput, Prisma.SubFieldUncheckedUpdateWithoutBookingsInput>
  create: Prisma.XOR<Prisma.SubFieldCreateWithoutBookingsInput, Prisma.SubFieldUncheckedCreateWithoutBookingsInput>
  where?: Prisma.SubFieldWhereInput
}

export type SubFieldUpdateToOneWithWhereWithoutBookingsInput = {
  where?: Prisma.SubFieldWhereInput
  data: Prisma.XOR<Prisma.SubFieldUpdateWithoutBookingsInput, Prisma.SubFieldUncheckedUpdateWithoutBookingsInput>
}

export type SubFieldUpdateWithoutBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex?: Prisma.ComplexUpdateOneRequiredWithoutSub_fieldsNestedInput
  pricing_rules?: Prisma.PricingRuleUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldUncheckedUpdateWithoutBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  complex_id?: Prisma.StringFieldUpdateOperationsInput | string
  pricing_rules?: Prisma.PricingRuleUncheckedUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldCreateManyComplexInput = {
  id?: string
  name: string
  capacity: number
}

export type SubFieldUpdateWithoutComplexInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  bookings?: Prisma.BookingUpdateManyWithoutSub_fieldNestedInput
  pricing_rules?: Prisma.PricingRuleUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldUncheckedUpdateWithoutComplexInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  bookings?: Prisma.BookingUncheckedUpdateManyWithoutSub_fieldNestedInput
  pricing_rules?: Prisma.PricingRuleUncheckedUpdateManyWithoutSub_fieldNestedInput
}

export type SubFieldUncheckedUpdateManyWithoutComplexInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type SubFieldCountOutputType
 */

export type SubFieldCountOutputType = {
  bookings: number
  pricing_rules: number
}

export type SubFieldCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bookings?: boolean | SubFieldCountOutputTypeCountBookingsArgs
  pricing_rules?: boolean | SubFieldCountOutputTypeCountPricing_rulesArgs
}

/**
 * SubFieldCountOutputType without action
 */
export type SubFieldCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubFieldCountOutputType
   */
  select?: Prisma.SubFieldCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SubFieldCountOutputType without action
 */
export type SubFieldCountOutputTypeCountBookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingWhereInput
}

/**
 * SubFieldCountOutputType without action
 */
export type SubFieldCountOutputTypeCountPricing_rulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PricingRuleWhereInput
}


export type SubFieldSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  capacity?: boolean
  complex_id?: boolean
  complex?: boolean | Prisma.ComplexDefaultArgs<ExtArgs>
  bookings?: boolean | Prisma.SubField$bookingsArgs<ExtArgs>
  pricing_rules?: boolean | Prisma.SubField$pricing_rulesArgs<ExtArgs>
  _count?: boolean | Prisma.SubFieldCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subField"]>

export type SubFieldSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  capacity?: boolean
  complex_id?: boolean
  complex?: boolean | Prisma.ComplexDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subField"]>

export type SubFieldSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  capacity?: boolean
  complex_id?: boolean
  complex?: boolean | Prisma.ComplexDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subField"]>

export type SubFieldSelectScalar = {
  id?: boolean
  name?: boolean
  capacity?: boolean
  complex_id?: boolean
}

export type SubFieldOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "capacity" | "complex_id", ExtArgs["result"]["subField"]>
export type SubFieldInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complex?: boolean | Prisma.ComplexDefaultArgs<ExtArgs>
  bookings?: boolean | Prisma.SubField$bookingsArgs<ExtArgs>
  pricing_rules?: boolean | Prisma.SubField$pricing_rulesArgs<ExtArgs>
  _count?: boolean | Prisma.SubFieldCountOutputTypeDefaultArgs<ExtArgs>
}
export type SubFieldIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complex?: boolean | Prisma.ComplexDefaultArgs<ExtArgs>
}
export type SubFieldIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complex?: boolean | Prisma.ComplexDefaultArgs<ExtArgs>
}

export type $SubFieldPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SubField"
  objects: {
    complex: Prisma.$ComplexPayload<ExtArgs>
    bookings: Prisma.$BookingPayload<ExtArgs>[]
    pricing_rules: Prisma.$PricingRulePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    capacity: number
    complex_id: string
  }, ExtArgs["result"]["subField"]>
  composites: {}
}

export type SubFieldGetPayload<S extends boolean | null | undefined | SubFieldDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SubFieldPayload, S>

export type SubFieldCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SubFieldFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SubFieldCountAggregateInputType | true
  }

export interface SubFieldDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubField'], meta: { name: 'SubField' } }
  /**
   * Find zero or one SubField that matches the filter.
   * @param {SubFieldFindUniqueArgs} args - Arguments to find a SubField
   * @example
   * // Get one SubField
   * const subField = await prisma.subField.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubFieldFindUniqueArgs>(args: Prisma.SelectSubset<T, SubFieldFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SubField that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubFieldFindUniqueOrThrowArgs} args - Arguments to find a SubField
   * @example
   * // Get one SubField
   * const subField = await prisma.subField.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubFieldFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SubFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SubField that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldFindFirstArgs} args - Arguments to find a SubField
   * @example
   * // Get one SubField
   * const subField = await prisma.subField.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubFieldFindFirstArgs>(args?: Prisma.SelectSubset<T, SubFieldFindFirstArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SubField that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldFindFirstOrThrowArgs} args - Arguments to find a SubField
   * @example
   * // Get one SubField
   * const subField = await prisma.subField.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubFieldFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SubFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SubFields that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SubFields
   * const subFields = await prisma.subField.findMany()
   * 
   * // Get first 10 SubFields
   * const subFields = await prisma.subField.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const subFieldWithIdOnly = await prisma.subField.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SubFieldFindManyArgs>(args?: Prisma.SelectSubset<T, SubFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SubField.
   * @param {SubFieldCreateArgs} args - Arguments to create a SubField.
   * @example
   * // Create one SubField
   * const SubField = await prisma.subField.create({
   *   data: {
   *     // ... data to create a SubField
   *   }
   * })
   * 
   */
  create<T extends SubFieldCreateArgs>(args: Prisma.SelectSubset<T, SubFieldCreateArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SubFields.
   * @param {SubFieldCreateManyArgs} args - Arguments to create many SubFields.
   * @example
   * // Create many SubFields
   * const subField = await prisma.subField.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SubFieldCreateManyArgs>(args?: Prisma.SelectSubset<T, SubFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SubFields and returns the data saved in the database.
   * @param {SubFieldCreateManyAndReturnArgs} args - Arguments to create many SubFields.
   * @example
   * // Create many SubFields
   * const subField = await prisma.subField.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SubFields and only return the `id`
   * const subFieldWithIdOnly = await prisma.subField.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SubFieldCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SubFieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SubField.
   * @param {SubFieldDeleteArgs} args - Arguments to delete one SubField.
   * @example
   * // Delete one SubField
   * const SubField = await prisma.subField.delete({
   *   where: {
   *     // ... filter to delete one SubField
   *   }
   * })
   * 
   */
  delete<T extends SubFieldDeleteArgs>(args: Prisma.SelectSubset<T, SubFieldDeleteArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SubField.
   * @param {SubFieldUpdateArgs} args - Arguments to update one SubField.
   * @example
   * // Update one SubField
   * const subField = await prisma.subField.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SubFieldUpdateArgs>(args: Prisma.SelectSubset<T, SubFieldUpdateArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SubFields.
   * @param {SubFieldDeleteManyArgs} args - Arguments to filter SubFields to delete.
   * @example
   * // Delete a few SubFields
   * const { count } = await prisma.subField.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SubFieldDeleteManyArgs>(args?: Prisma.SelectSubset<T, SubFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SubFields.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SubFields
   * const subField = await prisma.subField.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SubFieldUpdateManyArgs>(args: Prisma.SelectSubset<T, SubFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SubFields and returns the data updated in the database.
   * @param {SubFieldUpdateManyAndReturnArgs} args - Arguments to update many SubFields.
   * @example
   * // Update many SubFields
   * const subField = await prisma.subField.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SubFields and only return the `id`
   * const subFieldWithIdOnly = await prisma.subField.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SubFieldUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SubFieldUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SubField.
   * @param {SubFieldUpsertArgs} args - Arguments to update or create a SubField.
   * @example
   * // Update or create a SubField
   * const subField = await prisma.subField.upsert({
   *   create: {
   *     // ... data to create a SubField
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SubField we want to update
   *   }
   * })
   */
  upsert<T extends SubFieldUpsertArgs>(args: Prisma.SelectSubset<T, SubFieldUpsertArgs<ExtArgs>>): Prisma.Prisma__SubFieldClient<runtime.Types.Result.GetResult<Prisma.$SubFieldPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SubFields.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldCountArgs} args - Arguments to filter SubFields to count.
   * @example
   * // Count the number of SubFields
   * const count = await prisma.subField.count({
   *   where: {
   *     // ... the filter for the SubFields we want to count
   *   }
   * })
  **/
  count<T extends SubFieldCountArgs>(
    args?: Prisma.Subset<T, SubFieldCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SubFieldCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SubField.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SubFieldAggregateArgs>(args: Prisma.Subset<T, SubFieldAggregateArgs>): Prisma.PrismaPromise<GetSubFieldAggregateType<T>>

  /**
   * Group by SubField.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubFieldGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SubFieldGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubFieldGroupByArgs['orderBy'] }
      : { orderBy?: SubFieldGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SubFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SubField model
 */
readonly fields: SubFieldFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SubField.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubFieldClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  complex<T extends Prisma.ComplexDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ComplexDefaultArgs<ExtArgs>>): Prisma.Prisma__ComplexClient<runtime.Types.Result.GetResult<Prisma.$ComplexPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  bookings<T extends Prisma.SubField$bookingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubField$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  pricing_rules<T extends Prisma.SubField$pricing_rulesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubField$pricing_rulesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SubField model
 */
export interface SubFieldFieldRefs {
  readonly id: Prisma.FieldRef<"SubField", 'String'>
  readonly name: Prisma.FieldRef<"SubField", 'String'>
  readonly capacity: Prisma.FieldRef<"SubField", 'Int'>
  readonly complex_id: Prisma.FieldRef<"SubField", 'String'>
}
    

// Custom InputTypes
/**
 * SubField findUnique
 */
export type SubFieldFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * Filter, which SubField to fetch.
   */
  where: Prisma.SubFieldWhereUniqueInput
}

/**
 * SubField findUniqueOrThrow
 */
export type SubFieldFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * Filter, which SubField to fetch.
   */
  where: Prisma.SubFieldWhereUniqueInput
}

/**
 * SubField findFirst
 */
export type SubFieldFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * Filter, which SubField to fetch.
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubFields to fetch.
   */
  orderBy?: Prisma.SubFieldOrderByWithRelationInput | Prisma.SubFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SubFields.
   */
  cursor?: Prisma.SubFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubFields.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SubFields.
   */
  distinct?: Prisma.SubFieldScalarFieldEnum | Prisma.SubFieldScalarFieldEnum[]
}

/**
 * SubField findFirstOrThrow
 */
export type SubFieldFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * Filter, which SubField to fetch.
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubFields to fetch.
   */
  orderBy?: Prisma.SubFieldOrderByWithRelationInput | Prisma.SubFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SubFields.
   */
  cursor?: Prisma.SubFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubFields.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SubFields.
   */
  distinct?: Prisma.SubFieldScalarFieldEnum | Prisma.SubFieldScalarFieldEnum[]
}

/**
 * SubField findMany
 */
export type SubFieldFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * Filter, which SubFields to fetch.
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubFields to fetch.
   */
  orderBy?: Prisma.SubFieldOrderByWithRelationInput | Prisma.SubFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SubFields.
   */
  cursor?: Prisma.SubFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubFields.
   */
  skip?: number
  distinct?: Prisma.SubFieldScalarFieldEnum | Prisma.SubFieldScalarFieldEnum[]
}

/**
 * SubField create
 */
export type SubFieldCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * The data needed to create a SubField.
   */
  data: Prisma.XOR<Prisma.SubFieldCreateInput, Prisma.SubFieldUncheckedCreateInput>
}

/**
 * SubField createMany
 */
export type SubFieldCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SubFields.
   */
  data: Prisma.SubFieldCreateManyInput | Prisma.SubFieldCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SubField createManyAndReturn
 */
export type SubFieldCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * The data used to create many SubFields.
   */
  data: Prisma.SubFieldCreateManyInput | Prisma.SubFieldCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SubField update
 */
export type SubFieldUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * The data needed to update a SubField.
   */
  data: Prisma.XOR<Prisma.SubFieldUpdateInput, Prisma.SubFieldUncheckedUpdateInput>
  /**
   * Choose, which SubField to update.
   */
  where: Prisma.SubFieldWhereUniqueInput
}

/**
 * SubField updateMany
 */
export type SubFieldUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SubFields.
   */
  data: Prisma.XOR<Prisma.SubFieldUpdateManyMutationInput, Prisma.SubFieldUncheckedUpdateManyInput>
  /**
   * Filter which SubFields to update
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * Limit how many SubFields to update.
   */
  limit?: number
}

/**
 * SubField updateManyAndReturn
 */
export type SubFieldUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * The data used to update SubFields.
   */
  data: Prisma.XOR<Prisma.SubFieldUpdateManyMutationInput, Prisma.SubFieldUncheckedUpdateManyInput>
  /**
   * Filter which SubFields to update
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * Limit how many SubFields to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SubField upsert
 */
export type SubFieldUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * The filter to search for the SubField to update in case it exists.
   */
  where: Prisma.SubFieldWhereUniqueInput
  /**
   * In case the SubField found by the `where` argument doesn't exist, create a new SubField with this data.
   */
  create: Prisma.XOR<Prisma.SubFieldCreateInput, Prisma.SubFieldUncheckedCreateInput>
  /**
   * In case the SubField was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SubFieldUpdateInput, Prisma.SubFieldUncheckedUpdateInput>
}

/**
 * SubField delete
 */
export type SubFieldDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
  /**
   * Filter which SubField to delete.
   */
  where: Prisma.SubFieldWhereUniqueInput
}

/**
 * SubField deleteMany
 */
export type SubFieldDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SubFields to delete
   */
  where?: Prisma.SubFieldWhereInput
  /**
   * Limit how many SubFields to delete.
   */
  limit?: number
}

/**
 * SubField.bookings
 */
export type SubField$bookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  where?: Prisma.BookingWhereInput
  orderBy?: Prisma.BookingOrderByWithRelationInput | Prisma.BookingOrderByWithRelationInput[]
  cursor?: Prisma.BookingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * SubField.pricing_rules
 */
export type SubField$pricing_rulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingRule
   */
  select?: Prisma.PricingRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingRule
   */
  omit?: Prisma.PricingRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingRuleInclude<ExtArgs> | null
  where?: Prisma.PricingRuleWhereInput
  orderBy?: Prisma.PricingRuleOrderByWithRelationInput | Prisma.PricingRuleOrderByWithRelationInput[]
  cursor?: Prisma.PricingRuleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PricingRuleScalarFieldEnum | Prisma.PricingRuleScalarFieldEnum[]
}

/**
 * SubField without action
 */
export type SubFieldDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubField
   */
  select?: Prisma.SubFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubField
   */
  omit?: Prisma.SubFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubFieldInclude<ExtArgs> | null
}
